
Wack_A_Willy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003860  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080039f4  080039f4  000139f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab0  08003ab0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ab0  08003ab0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ab0  08003ab0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08003b28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003b28  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091cd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016c6  00000000  00000000  0002926d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b0  00000000  00000000  0002a938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e8  00000000  00000000  0002afe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d94b  00000000  00000000  0002b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000710b  00000000  00000000  00048f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a7bb6  00000000  00000000  00050026  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7bdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f84  00000000  00000000  000f7c58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080039dc 	.word	0x080039dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	080039dc 	.word	0x080039dc

080001d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_Init+0x28>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_Init+0x28>)
 80001de:	f043 0310 	orr.w	r3, r3, #16
 80001e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001e4:	2003      	movs	r0, #3
 80001e6:	f000 f92f 	bl	8000448 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f808 	bl	8000200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001f0:	f002 fda4 	bl	8002d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001f4:	2300      	movs	r3, #0
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40022000 	.word	0x40022000

08000200 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000208:	4b12      	ldr	r3, [pc, #72]	; (8000254 <HAL_InitTick+0x54>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <HAL_InitTick+0x58>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4619      	mov	r1, r3
 8000212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000216:	fbb3 f3f1 	udiv	r3, r3, r1
 800021a:	fbb2 f3f3 	udiv	r3, r2, r3
 800021e:	4618      	mov	r0, r3
 8000220:	f000 f939 	bl	8000496 <HAL_SYSTICK_Config>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800022a:	2301      	movs	r3, #1
 800022c:	e00e      	b.n	800024c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d80a      	bhi.n	800024a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	2200      	movs	r2, #0
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f000 f90f 	bl	800045e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000240:	4a06      	ldr	r2, [pc, #24]	; (800025c <HAL_InitTick+0x5c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000246:	2300      	movs	r3, #0
 8000248:	e000      	b.n	800024c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800024a:	2301      	movs	r3, #1
}
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000008 	.word	0x20000008
 8000258:	20000004 	.word	0x20000004
 800025c:	20000000 	.word	0x20000000

08000260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <HAL_IncTick+0x20>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	461a      	mov	r2, r3
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <HAL_IncTick+0x24>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4413      	add	r3, r2
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <HAL_IncTick+0x24>)
 8000272:	6013      	str	r3, [r2, #0]
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	20000004 	.word	0x20000004
 8000284:	20000098 	.word	0x20000098

08000288 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
  return uwTick;  
 800028c:	4b03      	ldr	r3, [pc, #12]	; (800029c <HAL_GetTick+0x14>)
 800028e:	681b      	ldr	r3, [r3, #0]
}
 8000290:	4618      	mov	r0, r3
 8000292:	46bd      	mov	sp, r7
 8000294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000098 	.word	0x20000098

080002a0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b084      	sub	sp, #16
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002a8:	f7ff ffee 	bl	8000288 <HAL_GetTick>
 80002ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002b8:	d005      	beq.n	80002c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <HAL_Delay+0x40>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	461a      	mov	r2, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	4413      	add	r3, r2
 80002c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002c6:	bf00      	nop
 80002c8:	f7ff ffde 	bl	8000288 <HAL_GetTick>
 80002cc:	4602      	mov	r2, r0
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	1ad3      	subs	r3, r2, r3
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d8f7      	bhi.n	80002c8 <HAL_Delay+0x28>
  {
  }
}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	20000004 	.word	0x20000004

080002e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f003 0307 	and.w	r3, r3, #7
 80002f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <__NVIC_SetPriorityGrouping+0x44>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002fa:	68ba      	ldr	r2, [r7, #8]
 80002fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000300:	4013      	ands	r3, r2
 8000302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800030c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000316:	4a04      	ldr	r2, [pc, #16]	; (8000328 <__NVIC_SetPriorityGrouping+0x44>)
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	60d3      	str	r3, [r2, #12]
}
 800031c:	bf00      	nop
 800031e:	3714      	adds	r7, #20
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	e000ed00 	.word	0xe000ed00

0800032c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000330:	4b04      	ldr	r3, [pc, #16]	; (8000344 <__NVIC_GetPriorityGrouping+0x18>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	0a1b      	lsrs	r3, r3, #8
 8000336:	f003 0307 	and.w	r3, r3, #7
}
 800033a:	4618      	mov	r0, r3
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	6039      	str	r1, [r7, #0]
 8000352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000358:	2b00      	cmp	r3, #0
 800035a:	db0a      	blt.n	8000372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	b2da      	uxtb	r2, r3
 8000360:	490c      	ldr	r1, [pc, #48]	; (8000394 <__NVIC_SetPriority+0x4c>)
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	0112      	lsls	r2, r2, #4
 8000368:	b2d2      	uxtb	r2, r2
 800036a:	440b      	add	r3, r1
 800036c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000370:	e00a      	b.n	8000388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	b2da      	uxtb	r2, r3
 8000376:	4908      	ldr	r1, [pc, #32]	; (8000398 <__NVIC_SetPriority+0x50>)
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	f003 030f 	and.w	r3, r3, #15
 800037e:	3b04      	subs	r3, #4
 8000380:	0112      	lsls	r2, r2, #4
 8000382:	b2d2      	uxtb	r2, r2
 8000384:	440b      	add	r3, r1
 8000386:	761a      	strb	r2, [r3, #24]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	e000e100 	.word	0xe000e100
 8000398:	e000ed00 	.word	0xe000ed00

0800039c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800039c:	b480      	push	{r7}
 800039e:	b089      	sub	sp, #36	; 0x24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	f003 0307 	and.w	r3, r3, #7
 80003ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003b0:	69fb      	ldr	r3, [r7, #28]
 80003b2:	f1c3 0307 	rsb	r3, r3, #7
 80003b6:	2b04      	cmp	r3, #4
 80003b8:	bf28      	it	cs
 80003ba:	2304      	movcs	r3, #4
 80003bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003be:	69fb      	ldr	r3, [r7, #28]
 80003c0:	3304      	adds	r3, #4
 80003c2:	2b06      	cmp	r3, #6
 80003c4:	d902      	bls.n	80003cc <NVIC_EncodePriority+0x30>
 80003c6:	69fb      	ldr	r3, [r7, #28]
 80003c8:	3b03      	subs	r3, #3
 80003ca:	e000      	b.n	80003ce <NVIC_EncodePriority+0x32>
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d0:	f04f 32ff 	mov.w	r2, #4294967295
 80003d4:	69bb      	ldr	r3, [r7, #24]
 80003d6:	fa02 f303 	lsl.w	r3, r2, r3
 80003da:	43da      	mvns	r2, r3
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	401a      	ands	r2, r3
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003e4:	f04f 31ff 	mov.w	r1, #4294967295
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	fa01 f303 	lsl.w	r3, r1, r3
 80003ee:	43d9      	mvns	r1, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f4:	4313      	orrs	r3, r2
         );
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3724      	adds	r7, #36	; 0x24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
	...

08000404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3b01      	subs	r3, #1
 8000410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000414:	d301      	bcc.n	800041a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000416:	2301      	movs	r3, #1
 8000418:	e00f      	b.n	800043a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <SysTick_Config+0x40>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3b01      	subs	r3, #1
 8000420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000422:	210f      	movs	r1, #15
 8000424:	f04f 30ff 	mov.w	r0, #4294967295
 8000428:	f7ff ff8e 	bl	8000348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800042c:	4b05      	ldr	r3, [pc, #20]	; (8000444 <SysTick_Config+0x40>)
 800042e:	2200      	movs	r2, #0
 8000430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SysTick_Config+0x40>)
 8000434:	2207      	movs	r2, #7
 8000436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000438:	2300      	movs	r3, #0
}
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	e000e010 	.word	0xe000e010

08000448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f7ff ff47 	bl	80002e4 <__NVIC_SetPriorityGrouping>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b086      	sub	sp, #24
 8000462:	af00      	add	r7, sp, #0
 8000464:	4603      	mov	r3, r0
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000470:	f7ff ff5c 	bl	800032c <__NVIC_GetPriorityGrouping>
 8000474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	68b9      	ldr	r1, [r7, #8]
 800047a:	6978      	ldr	r0, [r7, #20]
 800047c:	f7ff ff8e 	bl	800039c <NVIC_EncodePriority>
 8000480:	4602      	mov	r2, r0
 8000482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000486:	4611      	mov	r1, r2
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff5d 	bl	8000348 <__NVIC_SetPriority>
}
 800048e:	bf00      	nop
 8000490:	3718      	adds	r7, #24
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}

08000496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	b082      	sub	sp, #8
 800049a:	af00      	add	r7, sp, #0
 800049c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800049e:	6878      	ldr	r0, [r7, #4]
 80004a0:	f7ff ffb0 	bl	8000404 <SysTick_Config>
 80004a4:	4603      	mov	r3, r0
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
	...

080004b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b087      	sub	sp, #28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80004be:	e160      	b.n	8000782 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	2101      	movs	r1, #1
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	fa01 f303 	lsl.w	r3, r1, r3
 80004cc:	4013      	ands	r3, r2
 80004ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	f000 8152 	beq.w	800077c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	2b02      	cmp	r3, #2
 80004de:	d003      	beq.n	80004e8 <HAL_GPIO_Init+0x38>
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	2b12      	cmp	r3, #18
 80004e6:	d123      	bne.n	8000530 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	08da      	lsrs	r2, r3, #3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	3208      	adds	r2, #8
 80004f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	f003 0307 	and.w	r3, r3, #7
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	220f      	movs	r2, #15
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	43db      	mvns	r3, r3
 8000506:	693a      	ldr	r2, [r7, #16]
 8000508:	4013      	ands	r3, r2
 800050a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	691a      	ldr	r2, [r3, #16]
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	f003 0307 	and.w	r3, r3, #7
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	693a      	ldr	r2, [r7, #16]
 800051e:	4313      	orrs	r3, r2
 8000520:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	08da      	lsrs	r2, r3, #3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3208      	adds	r2, #8
 800052a:	6939      	ldr	r1, [r7, #16]
 800052c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	2203      	movs	r2, #3
 800053c:	fa02 f303 	lsl.w	r3, r2, r3
 8000540:	43db      	mvns	r3, r3
 8000542:	693a      	ldr	r2, [r7, #16]
 8000544:	4013      	ands	r3, r2
 8000546:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	f003 0203 	and.w	r2, r3, #3
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	fa02 f303 	lsl.w	r3, r2, r3
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	4313      	orrs	r3, r2
 800055c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	693a      	ldr	r2, [r7, #16]
 8000562:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d00b      	beq.n	8000584 <HAL_GPIO_Init+0xd4>
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	2b02      	cmp	r3, #2
 8000572:	d007      	beq.n	8000584 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000578:	2b11      	cmp	r3, #17
 800057a:	d003      	beq.n	8000584 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	2b12      	cmp	r3, #18
 8000582:	d130      	bne.n	80005e6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800058a:	697b      	ldr	r3, [r7, #20]
 800058c:	005b      	lsls	r3, r3, #1
 800058e:	2203      	movs	r2, #3
 8000590:	fa02 f303 	lsl.w	r3, r2, r3
 8000594:	43db      	mvns	r3, r3
 8000596:	693a      	ldr	r2, [r7, #16]
 8000598:	4013      	ands	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	68da      	ldr	r2, [r3, #12]
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	693a      	ldr	r2, [r7, #16]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	693a      	ldr	r2, [r7, #16]
 80005b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005ba:	2201      	movs	r2, #1
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	43db      	mvns	r3, r3
 80005c4:	693a      	ldr	r2, [r7, #16]
 80005c6:	4013      	ands	r3, r2
 80005c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	091b      	lsrs	r3, r3, #4
 80005d0:	f003 0201 	and.w	r2, r3, #1
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	fa02 f303 	lsl.w	r3, r2, r3
 80005da:	693a      	ldr	r2, [r7, #16]
 80005dc:	4313      	orrs	r3, r2
 80005de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	693a      	ldr	r2, [r7, #16]
 80005e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	2203      	movs	r2, #3
 80005f2:	fa02 f303 	lsl.w	r3, r2, r3
 80005f6:	43db      	mvns	r3, r3
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	4013      	ands	r3, r2
 80005fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	689a      	ldr	r2, [r3, #8]
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	fa02 f303 	lsl.w	r3, r2, r3
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	4313      	orrs	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061e:	2b00      	cmp	r3, #0
 8000620:	f000 80ac 	beq.w	800077c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000624:	4b5e      	ldr	r3, [pc, #376]	; (80007a0 <HAL_GPIO_Init+0x2f0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a5d      	ldr	r2, [pc, #372]	; (80007a0 <HAL_GPIO_Init+0x2f0>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b5b      	ldr	r3, [pc, #364]	; (80007a0 <HAL_GPIO_Init+0x2f0>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800063c:	4a59      	ldr	r2, [pc, #356]	; (80007a4 <HAL_GPIO_Init+0x2f4>)
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	089b      	lsrs	r3, r3, #2
 8000642:	3302      	adds	r3, #2
 8000644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000648:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	f003 0303 	and.w	r3, r3, #3
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	220f      	movs	r2, #15
 8000654:	fa02 f303 	lsl.w	r3, r2, r3
 8000658:	43db      	mvns	r3, r3
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	4013      	ands	r3, r2
 800065e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000666:	d025      	beq.n	80006b4 <HAL_GPIO_Init+0x204>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a4f      	ldr	r2, [pc, #316]	; (80007a8 <HAL_GPIO_Init+0x2f8>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d01f      	beq.n	80006b0 <HAL_GPIO_Init+0x200>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a4e      	ldr	r2, [pc, #312]	; (80007ac <HAL_GPIO_Init+0x2fc>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d019      	beq.n	80006ac <HAL_GPIO_Init+0x1fc>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a4d      	ldr	r2, [pc, #308]	; (80007b0 <HAL_GPIO_Init+0x300>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d013      	beq.n	80006a8 <HAL_GPIO_Init+0x1f8>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a4c      	ldr	r2, [pc, #304]	; (80007b4 <HAL_GPIO_Init+0x304>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d00d      	beq.n	80006a4 <HAL_GPIO_Init+0x1f4>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a4b      	ldr	r2, [pc, #300]	; (80007b8 <HAL_GPIO_Init+0x308>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d007      	beq.n	80006a0 <HAL_GPIO_Init+0x1f0>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a4a      	ldr	r2, [pc, #296]	; (80007bc <HAL_GPIO_Init+0x30c>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d101      	bne.n	800069c <HAL_GPIO_Init+0x1ec>
 8000698:	2306      	movs	r3, #6
 800069a:	e00c      	b.n	80006b6 <HAL_GPIO_Init+0x206>
 800069c:	2307      	movs	r3, #7
 800069e:	e00a      	b.n	80006b6 <HAL_GPIO_Init+0x206>
 80006a0:	2305      	movs	r3, #5
 80006a2:	e008      	b.n	80006b6 <HAL_GPIO_Init+0x206>
 80006a4:	2304      	movs	r3, #4
 80006a6:	e006      	b.n	80006b6 <HAL_GPIO_Init+0x206>
 80006a8:	2303      	movs	r3, #3
 80006aa:	e004      	b.n	80006b6 <HAL_GPIO_Init+0x206>
 80006ac:	2302      	movs	r3, #2
 80006ae:	e002      	b.n	80006b6 <HAL_GPIO_Init+0x206>
 80006b0:	2301      	movs	r3, #1
 80006b2:	e000      	b.n	80006b6 <HAL_GPIO_Init+0x206>
 80006b4:	2300      	movs	r3, #0
 80006b6:	697a      	ldr	r2, [r7, #20]
 80006b8:	f002 0203 	and.w	r2, r2, #3
 80006bc:	0092      	lsls	r2, r2, #2
 80006be:	4093      	lsls	r3, r2
 80006c0:	693a      	ldr	r2, [r7, #16]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80006c6:	4937      	ldr	r1, [pc, #220]	; (80007a4 <HAL_GPIO_Init+0x2f4>)
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	089b      	lsrs	r3, r3, #2
 80006cc:	3302      	adds	r3, #2
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006d4:	4b3a      	ldr	r3, [pc, #232]	; (80007c0 <HAL_GPIO_Init+0x310>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	43db      	mvns	r3, r3
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	4013      	ands	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d003      	beq.n	80006f8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006f8:	4a31      	ldr	r2, [pc, #196]	; (80007c0 <HAL_GPIO_Init+0x310>)
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <HAL_GPIO_Init+0x310>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	43db      	mvns	r3, r3
 8000708:	693a      	ldr	r2, [r7, #16]
 800070a:	4013      	ands	r3, r2
 800070c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d003      	beq.n	8000722 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4313      	orrs	r3, r2
 8000720:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000722:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <HAL_GPIO_Init+0x310>)
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000728:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <HAL_GPIO_Init+0x310>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	43db      	mvns	r3, r3
 8000732:	693a      	ldr	r2, [r7, #16]
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000740:	2b00      	cmp	r3, #0
 8000742:	d003      	beq.n	800074c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000744:	693a      	ldr	r2, [r7, #16]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4313      	orrs	r3, r2
 800074a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800074c:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <HAL_GPIO_Init+0x310>)
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <HAL_GPIO_Init+0x310>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	43db      	mvns	r3, r3
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	4013      	ands	r3, r2
 8000760:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076a:	2b00      	cmp	r3, #0
 800076c:	d003      	beq.n	8000776 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	4313      	orrs	r3, r2
 8000774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <HAL_GPIO_Init+0x310>)
 8000778:	693b      	ldr	r3, [r7, #16]
 800077a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	3301      	adds	r3, #1
 8000780:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	fa22 f303 	lsr.w	r3, r2, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	f47f ae97 	bne.w	80004c0 <HAL_GPIO_Init+0x10>
  }
}
 8000792:	bf00      	nop
 8000794:	371c      	adds	r7, #28
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000
 80007a8:	48000400 	.word	0x48000400
 80007ac:	48000800 	.word	0x48000800
 80007b0:	48000c00 	.word	0x48000c00
 80007b4:	48001000 	.word	0x48001000
 80007b8:	48001400 	.word	0x48001400
 80007bc:	48001800 	.word	0x48001800
 80007c0:	40010400 	.word	0x40010400

080007c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
 80007d0:	4613      	mov	r3, r2
 80007d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007d4:	787b      	ldrb	r3, [r7, #1]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007da:	887a      	ldrh	r2, [r7, #2]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007e0:	e002      	b.n	80007e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007e2:	887a      	ldrh	r2, [r7, #2]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000808:	2301      	movs	r3, #1
 800080a:	f000 bf01 	b.w	8001610 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	2b00      	cmp	r3, #0
 800081a:	f000 8160 	beq.w	8000ade <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800081e:	4bae      	ldr	r3, [pc, #696]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	f003 030c 	and.w	r3, r3, #12
 8000826:	2b04      	cmp	r3, #4
 8000828:	d00c      	beq.n	8000844 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800082a:	4bab      	ldr	r3, [pc, #684]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 030c 	and.w	r3, r3, #12
 8000832:	2b08      	cmp	r3, #8
 8000834:	d159      	bne.n	80008ea <HAL_RCC_OscConfig+0xf6>
 8000836:	4ba8      	ldr	r3, [pc, #672]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800083e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000842:	d152      	bne.n	80008ea <HAL_RCC_OscConfig+0xf6>
 8000844:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000848:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800084c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000850:	fa93 f3a3 	rbit	r3, r3
 8000854:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000858:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800085c:	fab3 f383 	clz	r3, r3
 8000860:	b2db      	uxtb	r3, r3
 8000862:	095b      	lsrs	r3, r3, #5
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f043 0301 	orr.w	r3, r3, #1
 800086a:	b2db      	uxtb	r3, r3
 800086c:	2b01      	cmp	r3, #1
 800086e:	d102      	bne.n	8000876 <HAL_RCC_OscConfig+0x82>
 8000870:	4b99      	ldr	r3, [pc, #612]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	e015      	b.n	80008a2 <HAL_RCC_OscConfig+0xae>
 8000876:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800087a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800087e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000882:	fa93 f3a3 	rbit	r3, r3
 8000886:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800088a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800088e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000892:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000896:	fa93 f3a3 	rbit	r3, r3
 800089a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800089e:	4b8e      	ldr	r3, [pc, #568]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 80008a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008a6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80008aa:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80008ae:	fa92 f2a2 	rbit	r2, r2
 80008b2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80008b6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80008ba:	fab2 f282 	clz	r2, r2
 80008be:	b2d2      	uxtb	r2, r2
 80008c0:	f042 0220 	orr.w	r2, r2, #32
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	f002 021f 	and.w	r2, r2, #31
 80008ca:	2101      	movs	r1, #1
 80008cc:	fa01 f202 	lsl.w	r2, r1, r2
 80008d0:	4013      	ands	r3, r2
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	f000 8102 	beq.w	8000adc <HAL_RCC_OscConfig+0x2e8>
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f040 80fc 	bne.w	8000adc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	f000 be93 	b.w	8001610 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008f4:	d106      	bne.n	8000904 <HAL_RCC_OscConfig+0x110>
 80008f6:	4b78      	ldr	r3, [pc, #480]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a77      	ldr	r2, [pc, #476]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 80008fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000900:	6013      	str	r3, [r2, #0]
 8000902:	e030      	b.n	8000966 <HAL_RCC_OscConfig+0x172>
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d10c      	bne.n	8000928 <HAL_RCC_OscConfig+0x134>
 800090e:	4b72      	ldr	r3, [pc, #456]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a71      	ldr	r2, [pc, #452]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	4b6f      	ldr	r3, [pc, #444]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a6e      	ldr	r2, [pc, #440]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000924:	6013      	str	r3, [r2, #0]
 8000926:	e01e      	b.n	8000966 <HAL_RCC_OscConfig+0x172>
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000932:	d10c      	bne.n	800094e <HAL_RCC_OscConfig+0x15a>
 8000934:	4b68      	ldr	r3, [pc, #416]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a67      	ldr	r2, [pc, #412]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 800093a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800093e:	6013      	str	r3, [r2, #0]
 8000940:	4b65      	ldr	r3, [pc, #404]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a64      	ldr	r2, [pc, #400]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	e00b      	b.n	8000966 <HAL_RCC_OscConfig+0x172>
 800094e:	4b62      	ldr	r3, [pc, #392]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a61      	ldr	r2, [pc, #388]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000958:	6013      	str	r3, [r2, #0]
 800095a:	4b5f      	ldr	r3, [pc, #380]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a5e      	ldr	r2, [pc, #376]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000964:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d059      	beq.n	8000a24 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000970:	f7ff fc8a 	bl	8000288 <HAL_GetTick>
 8000974:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000978:	e00a      	b.n	8000990 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800097a:	f7ff fc85 	bl	8000288 <HAL_GetTick>
 800097e:	4602      	mov	r2, r0
 8000980:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2b64      	cmp	r3, #100	; 0x64
 8000988:	d902      	bls.n	8000990 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800098a:	2303      	movs	r3, #3
 800098c:	f000 be40 	b.w	8001610 <HAL_RCC_OscConfig+0xe1c>
 8000990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000994:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000998:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800099c:	fa93 f3a3 	rbit	r3, r3
 80009a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80009a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009a8:	fab3 f383 	clz	r3, r3
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	095b      	lsrs	r3, r3, #5
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d102      	bne.n	80009c2 <HAL_RCC_OscConfig+0x1ce>
 80009bc:	4b46      	ldr	r3, [pc, #280]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	e015      	b.n	80009ee <HAL_RCC_OscConfig+0x1fa>
 80009c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80009ce:	fa93 f3a3 	rbit	r3, r3
 80009d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80009d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009da:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80009de:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80009e2:	fa93 f3a3 	rbit	r3, r3
 80009e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80009ea:	4b3b      	ldr	r3, [pc, #236]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 80009ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009f2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80009f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80009fa:	fa92 f2a2 	rbit	r2, r2
 80009fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000a02:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000a06:	fab2 f282 	clz	r2, r2
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	f042 0220 	orr.w	r2, r2, #32
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	f002 021f 	and.w	r2, r2, #31
 8000a16:	2101      	movs	r1, #1
 8000a18:	fa01 f202 	lsl.w	r2, r1, r2
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d0ab      	beq.n	800097a <HAL_RCC_OscConfig+0x186>
 8000a22:	e05c      	b.n	8000ade <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a24:	f7ff fc30 	bl	8000288 <HAL_GetTick>
 8000a28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a2c:	e00a      	b.n	8000a44 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a2e:	f7ff fc2b 	bl	8000288 <HAL_GetTick>
 8000a32:	4602      	mov	r2, r0
 8000a34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	2b64      	cmp	r3, #100	; 0x64
 8000a3c:	d902      	bls.n	8000a44 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	f000 bde6 	b.w	8001610 <HAL_RCC_OscConfig+0xe1c>
 8000a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a48:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000a50:	fa93 f3a3 	rbit	r3, r3
 8000a54:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000a58:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a5c:	fab3 f383 	clz	r3, r3
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d102      	bne.n	8000a76 <HAL_RCC_OscConfig+0x282>
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	e015      	b.n	8000aa2 <HAL_RCC_OscConfig+0x2ae>
 8000a76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a7a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000a82:	fa93 f3a3 	rbit	r3, r3
 8000a86:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000a8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a8e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000a92:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000a96:	fa93 f3a3 	rbit	r3, r3
 8000a9a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_RCC_OscConfig+0x2e4>)
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aa6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000aaa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000aae:	fa92 f2a2 	rbit	r2, r2
 8000ab2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000ab6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000aba:	fab2 f282 	clz	r2, r2
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	f042 0220 	orr.w	r2, r2, #32
 8000ac4:	b2d2      	uxtb	r2, r2
 8000ac6:	f002 021f 	and.w	r2, r2, #31
 8000aca:	2101      	movs	r1, #1
 8000acc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1ab      	bne.n	8000a2e <HAL_RCC_OscConfig+0x23a>
 8000ad6:	e002      	b.n	8000ade <HAL_RCC_OscConfig+0x2ea>
 8000ad8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f000 8170 	beq.w	8000dce <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000aee:	4bd0      	ldr	r3, [pc, #832]	; (8000e30 <HAL_RCC_OscConfig+0x63c>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 030c 	and.w	r3, r3, #12
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d00c      	beq.n	8000b14 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000afa:	4bcd      	ldr	r3, [pc, #820]	; (8000e30 <HAL_RCC_OscConfig+0x63c>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f003 030c 	and.w	r3, r3, #12
 8000b02:	2b08      	cmp	r3, #8
 8000b04:	d16d      	bne.n	8000be2 <HAL_RCC_OscConfig+0x3ee>
 8000b06:	4bca      	ldr	r3, [pc, #808]	; (8000e30 <HAL_RCC_OscConfig+0x63c>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b12:	d166      	bne.n	8000be2 <HAL_RCC_OscConfig+0x3ee>
 8000b14:	2302      	movs	r3, #2
 8000b16:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b1a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000b1e:	fa93 f3a3 	rbit	r3, r3
 8000b22:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8000b26:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b2a:	fab3 f383 	clz	r3, r3
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	095b      	lsrs	r3, r3, #5
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d102      	bne.n	8000b44 <HAL_RCC_OscConfig+0x350>
 8000b3e:	4bbc      	ldr	r3, [pc, #752]	; (8000e30 <HAL_RCC_OscConfig+0x63c>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	e013      	b.n	8000b6c <HAL_RCC_OscConfig+0x378>
 8000b44:	2302      	movs	r3, #2
 8000b46:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b4a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000b4e:	fa93 f3a3 	rbit	r3, r3
 8000b52:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000b56:	2302      	movs	r3, #2
 8000b58:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000b5c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b60:	fa93 f3a3 	rbit	r3, r3
 8000b64:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000b68:	4bb1      	ldr	r3, [pc, #708]	; (8000e30 <HAL_RCC_OscConfig+0x63c>)
 8000b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000b72:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000b76:	fa92 f2a2 	rbit	r2, r2
 8000b7a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8000b7e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	f042 0220 	orr.w	r2, r2, #32
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	f002 021f 	and.w	r2, r2, #31
 8000b92:	2101      	movs	r1, #1
 8000b94:	fa01 f202 	lsl.w	r2, r1, r2
 8000b98:	4013      	ands	r3, r2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d007      	beq.n	8000bae <HAL_RCC_OscConfig+0x3ba>
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d002      	beq.n	8000bae <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	f000 bd31 	b.w	8001610 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bae:	4ba0      	ldr	r3, [pc, #640]	; (8000e30 <HAL_RCC_OscConfig+0x63c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	21f8      	movs	r1, #248	; 0xf8
 8000bbe:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bc2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8000bc6:	fa91 f1a1 	rbit	r1, r1
 8000bca:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8000bce:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000bd2:	fab1 f181 	clz	r1, r1
 8000bd6:	b2c9      	uxtb	r1, r1
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	4995      	ldr	r1, [pc, #596]	; (8000e30 <HAL_RCC_OscConfig+0x63c>)
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000be0:	e0f5      	b.n	8000dce <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	f000 8085 	beq.w	8000cf8 <HAL_RCC_OscConfig+0x504>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bf4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000bf8:	fa93 f3a3 	rbit	r3, r3
 8000bfc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8000c00:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c04:	fab3 f383 	clz	r3, r3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	461a      	mov	r2, r3
 8000c16:	2301      	movs	r3, #1
 8000c18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c1a:	f7ff fb35 	bl	8000288 <HAL_GetTick>
 8000c1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c22:	e00a      	b.n	8000c3a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c24:	f7ff fb30 	bl	8000288 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d902      	bls.n	8000c3a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8000c34:	2303      	movs	r3, #3
 8000c36:	f000 bceb 	b.w	8001610 <HAL_RCC_OscConfig+0xe1c>
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c40:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000c44:	fa93 f3a3 	rbit	r3, r3
 8000c48:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8000c4c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c50:	fab3 f383 	clz	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d102      	bne.n	8000c6a <HAL_RCC_OscConfig+0x476>
 8000c64:	4b72      	ldr	r3, [pc, #456]	; (8000e30 <HAL_RCC_OscConfig+0x63c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	e013      	b.n	8000c92 <HAL_RCC_OscConfig+0x49e>
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c70:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000c74:	fa93 f3a3 	rbit	r3, r3
 8000c78:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000c82:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000c86:	fa93 f3a3 	rbit	r3, r3
 8000c8a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000c8e:	4b68      	ldr	r3, [pc, #416]	; (8000e30 <HAL_RCC_OscConfig+0x63c>)
 8000c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c92:	2202      	movs	r2, #2
 8000c94:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000c98:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000c9c:	fa92 f2a2 	rbit	r2, r2
 8000ca0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8000ca4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	f042 0220 	orr.w	r2, r2, #32
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	f002 021f 	and.w	r2, r2, #31
 8000cb8:	2101      	movs	r1, #1
 8000cba:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0af      	beq.n	8000c24 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc4:	4b5a      	ldr	r3, [pc, #360]	; (8000e30 <HAL_RCC_OscConfig+0x63c>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	21f8      	movs	r1, #248	; 0xf8
 8000cd4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8000cdc:	fa91 f1a1 	rbit	r1, r1
 8000ce0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8000ce4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8000ce8:	fab1 f181 	clz	r1, r1
 8000cec:	b2c9      	uxtb	r1, r1
 8000cee:	408b      	lsls	r3, r1
 8000cf0:	494f      	ldr	r1, [pc, #316]	; (8000e30 <HAL_RCC_OscConfig+0x63c>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	600b      	str	r3, [r1, #0]
 8000cf6:	e06a      	b.n	8000dce <HAL_RCC_OscConfig+0x5da>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000d02:	fa93 f3a3 	rbit	r3, r3
 8000d06:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8000d0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d0e:	fab3 f383 	clz	r3, r3
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	461a      	mov	r2, r3
 8000d20:	2300      	movs	r3, #0
 8000d22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d24:	f7ff fab0 	bl	8000288 <HAL_GetTick>
 8000d28:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2c:	e00a      	b.n	8000d44 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d2e:	f7ff faab 	bl	8000288 <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d902      	bls.n	8000d44 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	f000 bc66 	b.w	8001610 <HAL_RCC_OscConfig+0xe1c>
 8000d44:	2302      	movs	r3, #2
 8000d46:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d4e:	fa93 f3a3 	rbit	r3, r3
 8000d52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8000d56:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5a:	fab3 f383 	clz	r3, r3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	095b      	lsrs	r3, r3, #5
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d102      	bne.n	8000d74 <HAL_RCC_OscConfig+0x580>
 8000d6e:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <HAL_RCC_OscConfig+0x63c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	e013      	b.n	8000d9c <HAL_RCC_OscConfig+0x5a8>
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d7e:	fa93 f3a3 	rbit	r3, r3
 8000d82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000d86:	2302      	movs	r3, #2
 8000d88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000d8c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d90:	fa93 f3a3 	rbit	r3, r3
 8000d94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <HAL_RCC_OscConfig+0x63c>)
 8000d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000da2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000da6:	fa92 f2a2 	rbit	r2, r2
 8000daa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8000dae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	f042 0220 	orr.w	r2, r2, #32
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	f002 021f 	and.w	r2, r2, #31
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc8:	4013      	ands	r3, r2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1af      	bne.n	8000d2e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80da 	beq.w	8000f92 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d069      	beq.n	8000ebc <HAL_RCC_OscConfig+0x6c8>
 8000de8:	2301      	movs	r3, #1
 8000dea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000df2:	fa93 f3a3 	rbit	r3, r3
 8000df6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8000dfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dfe:	fab3 f383 	clz	r3, r3
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_RCC_OscConfig+0x640>)
 8000e08:	4413      	add	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	2301      	movs	r3, #1
 8000e10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e12:	f7ff fa39 	bl	8000288 <HAL_GetTick>
 8000e16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e1a:	e00d      	b.n	8000e38 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fa34 	bl	8000288 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d905      	bls.n	8000e38 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e3ef      	b.n	8001610 <HAL_RCC_OscConfig+0xe1c>
 8000e30:	40021000 	.word	0x40021000
 8000e34:	10908120 	.word	0x10908120
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e42:	fa93 f2a3 	rbit	r2, r3
 8000e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000e50:	2202      	movs	r2, #2
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	fa93 f2a3 	rbit	r2, r3
 8000e5e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e68:	2202      	movs	r2, #2
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	fa93 f2a3 	rbit	r2, r3
 8000e76:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e7a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7c:	4ba4      	ldr	r3, [pc, #656]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8000e7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e80:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e84:	2102      	movs	r1, #2
 8000e86:	6019      	str	r1, [r3, #0]
 8000e88:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	fa93 f1a3 	rbit	r1, r3
 8000e92:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e96:	6019      	str	r1, [r3, #0]
  return result;
 8000e98:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	fab3 f383 	clz	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	f003 031f 	and.w	r3, r3, #31
 8000eae:	2101      	movs	r1, #1
 8000eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0b0      	beq.n	8000e1c <HAL_RCC_OscConfig+0x628>
 8000eba:	e06a      	b.n	8000f92 <HAL_RCC_OscConfig+0x79e>
 8000ebc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ec4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	fa93 f2a3 	rbit	r2, r3
 8000ece:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000ed2:	601a      	str	r2, [r3, #0]
  return result;
 8000ed4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000ed8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eda:	fab3 f383 	clz	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b8c      	ldr	r3, [pc, #560]	; (8001114 <HAL_RCC_OscConfig+0x920>)
 8000ee4:	4413      	add	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2300      	movs	r3, #0
 8000eec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eee:	f7ff f9cb 	bl	8000288 <HAL_GetTick>
 8000ef2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef6:	e009      	b.n	8000f0c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef8:	f7ff f9c6 	bl	8000288 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e381      	b.n	8001610 <HAL_RCC_OscConfig+0xe1c>
 8000f0c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f10:	2202      	movs	r2, #2
 8000f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f14:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	fa93 f2a3 	rbit	r2, r3
 8000f1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f28:	2202      	movs	r2, #2
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	fa93 f2a3 	rbit	r2, r3
 8000f36:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f40:	2202      	movs	r2, #2
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	fa93 f2a3 	rbit	r2, r3
 8000f4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f54:	4b6e      	ldr	r3, [pc, #440]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8000f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	6019      	str	r1, [r3, #0]
 8000f60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	fa93 f1a3 	rbit	r1, r3
 8000f6a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f6e:	6019      	str	r1, [r3, #0]
  return result;
 8000f70:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	fab3 f383 	clz	r3, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	f003 031f 	and.w	r3, r3, #31
 8000f86:	2101      	movs	r1, #1
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1b2      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0304 	and.w	r3, r3, #4
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 8157 	beq.w	8001250 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fa8:	4b59      	ldr	r3, [pc, #356]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d112      	bne.n	8000fda <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	4b56      	ldr	r3, [pc, #344]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	4a55      	ldr	r2, [pc, #340]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8000fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	61d3      	str	r3, [r2, #28]
 8000fc0:	4b53      	ldr	r3, [pc, #332]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fda:	4b4f      	ldr	r3, [pc, #316]	; (8001118 <HAL_RCC_OscConfig+0x924>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d11a      	bne.n	800101c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	; (8001118 <HAL_RCC_OscConfig+0x924>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a4b      	ldr	r2, [pc, #300]	; (8001118 <HAL_RCC_OscConfig+0x924>)
 8000fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ff2:	f7ff f949 	bl	8000288 <HAL_GetTick>
 8000ff6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ffa:	e009      	b.n	8001010 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ffc:	f7ff f944 	bl	8000288 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b64      	cmp	r3, #100	; 0x64
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e2ff      	b.n	8001610 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001010:	4b41      	ldr	r3, [pc, #260]	; (8001118 <HAL_RCC_OscConfig+0x924>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001018:	2b00      	cmp	r3, #0
 800101a:	d0ef      	beq.n	8000ffc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d106      	bne.n	8001034 <HAL_RCC_OscConfig+0x840>
 8001026:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4a39      	ldr	r2, [pc, #228]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6213      	str	r3, [r2, #32]
 8001032:	e02f      	b.n	8001094 <HAL_RCC_OscConfig+0x8a0>
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10c      	bne.n	8001058 <HAL_RCC_OscConfig+0x864>
 800103e:	4b34      	ldr	r3, [pc, #208]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4a33      	ldr	r2, [pc, #204]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	6213      	str	r3, [r2, #32]
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a30      	ldr	r2, [pc, #192]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8001050:	f023 0304 	bic.w	r3, r3, #4
 8001054:	6213      	str	r3, [r2, #32]
 8001056:	e01d      	b.n	8001094 <HAL_RCC_OscConfig+0x8a0>
 8001058:	1d3b      	adds	r3, r7, #4
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2b05      	cmp	r3, #5
 8001060:	d10c      	bne.n	800107c <HAL_RCC_OscConfig+0x888>
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	4a2a      	ldr	r2, [pc, #168]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6213      	str	r3, [r2, #32]
 800106e:	4b28      	ldr	r3, [pc, #160]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	4a27      	ldr	r2, [pc, #156]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6213      	str	r3, [r2, #32]
 800107a:	e00b      	b.n	8001094 <HAL_RCC_OscConfig+0x8a0>
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	4a23      	ldr	r2, [pc, #140]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 8001082:	f023 0301 	bic.w	r3, r3, #1
 8001086:	6213      	str	r3, [r2, #32]
 8001088:	4b21      	ldr	r3, [pc, #132]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	4a20      	ldr	r2, [pc, #128]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 800108e:	f023 0304 	bic.w	r3, r3, #4
 8001092:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d06a      	beq.n	8001174 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109e:	f7ff f8f3 	bl	8000288 <HAL_GetTick>
 80010a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a6:	e00b      	b.n	80010c0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a8:	f7ff f8ee 	bl	8000288 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e2a7      	b.n	8001610 <HAL_RCC_OscConfig+0xe1c>
 80010c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010c4:	2202      	movs	r2, #2
 80010c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	fa93 f2a3 	rbit	r2, r3
 80010d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010dc:	2202      	movs	r2, #2
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	fa93 f2a3 	rbit	r2, r3
 80010ea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010ee:	601a      	str	r2, [r3, #0]
  return result;
 80010f0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	095b      	lsrs	r3, r3, #5
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d108      	bne.n	800111c <HAL_RCC_OscConfig+0x928>
 800110a:	4b01      	ldr	r3, [pc, #4]	; (8001110 <HAL_RCC_OscConfig+0x91c>)
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	e013      	b.n	8001138 <HAL_RCC_OscConfig+0x944>
 8001110:	40021000 	.word	0x40021000
 8001114:	10908120 	.word	0x10908120
 8001118:	40007000 	.word	0x40007000
 800111c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001120:	2202      	movs	r2, #2
 8001122:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001124:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	fa93 f2a3 	rbit	r2, r3
 800112e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	4bc0      	ldr	r3, [pc, #768]	; (8001438 <HAL_RCC_OscConfig+0xc44>)
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800113c:	2102      	movs	r1, #2
 800113e:	6011      	str	r1, [r2, #0]
 8001140:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	fa92 f1a2 	rbit	r1, r2
 800114a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800114e:	6011      	str	r1, [r2, #0]
  return result;
 8001150:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001154:	6812      	ldr	r2, [r2, #0]
 8001156:	fab2 f282 	clz	r2, r2
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	f002 021f 	and.w	r2, r2, #31
 8001166:	2101      	movs	r1, #1
 8001168:	fa01 f202 	lsl.w	r2, r1, r2
 800116c:	4013      	ands	r3, r2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d09a      	beq.n	80010a8 <HAL_RCC_OscConfig+0x8b4>
 8001172:	e063      	b.n	800123c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff f888 	bl	8000288 <HAL_GetTick>
 8001178:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800117c:	e00b      	b.n	8001196 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800117e:	f7ff f883 	bl	8000288 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	f241 3288 	movw	r2, #5000	; 0x1388
 800118e:	4293      	cmp	r3, r2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e23c      	b.n	8001610 <HAL_RCC_OscConfig+0xe1c>
 8001196:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800119a:	2202      	movs	r2, #2
 800119c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	fa93 f2a3 	rbit	r2, r3
 80011a8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011b2:	2202      	movs	r2, #2
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	fa93 f2a3 	rbit	r2, r3
 80011c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011c4:	601a      	str	r2, [r3, #0]
  return result;
 80011c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011ca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011cc:	fab3 f383 	clz	r3, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d102      	bne.n	80011e6 <HAL_RCC_OscConfig+0x9f2>
 80011e0:	4b95      	ldr	r3, [pc, #596]	; (8001438 <HAL_RCC_OscConfig+0xc44>)
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	e00d      	b.n	8001202 <HAL_RCC_OscConfig+0xa0e>
 80011e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011ea:	2202      	movs	r2, #2
 80011ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	fa93 f2a3 	rbit	r2, r3
 80011f8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	4b8e      	ldr	r3, [pc, #568]	; (8001438 <HAL_RCC_OscConfig+0xc44>)
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001206:	2102      	movs	r1, #2
 8001208:	6011      	str	r1, [r2, #0]
 800120a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	fa92 f1a2 	rbit	r1, r2
 8001214:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001218:	6011      	str	r1, [r2, #0]
  return result;
 800121a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	fab2 f282 	clz	r2, r2
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	f002 021f 	and.w	r2, r2, #31
 8001230:	2101      	movs	r1, #1
 8001232:	fa01 f202 	lsl.w	r2, r1, r2
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1a0      	bne.n	800117e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800123c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001240:	2b01      	cmp	r3, #1
 8001242:	d105      	bne.n	8001250 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001244:	4b7c      	ldr	r3, [pc, #496]	; (8001438 <HAL_RCC_OscConfig+0xc44>)
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	4a7b      	ldr	r2, [pc, #492]	; (8001438 <HAL_RCC_OscConfig+0xc44>)
 800124a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800124e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 81d9 	beq.w	800160e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800125c:	4b76      	ldr	r3, [pc, #472]	; (8001438 <HAL_RCC_OscConfig+0xc44>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	2b08      	cmp	r3, #8
 8001266:	f000 81a6 	beq.w	80015b6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	2b02      	cmp	r3, #2
 8001272:	f040 811e 	bne.w	80014b2 <HAL_RCC_OscConfig+0xcbe>
 8001276:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800127a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800127e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001280:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	fa93 f2a3 	rbit	r2, r3
 800128a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800128e:	601a      	str	r2, [r3, #0]
  return result;
 8001290:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001294:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001296:	fab3 f383 	clz	r3, r3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	461a      	mov	r2, r3
 80012a8:	2300      	movs	r3, #0
 80012aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7fe ffec 	bl	8000288 <HAL_GetTick>
 80012b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b4:	e009      	b.n	80012ca <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b6:	f7fe ffe7 	bl	8000288 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e1a2      	b.n	8001610 <HAL_RCC_OscConfig+0xe1c>
 80012ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	fa93 f2a3 	rbit	r2, r3
 80012de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012e2:	601a      	str	r2, [r3, #0]
  return result;
 80012e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ea:	fab3 f383 	clz	r3, r3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	095b      	lsrs	r3, r3, #5
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d102      	bne.n	8001304 <HAL_RCC_OscConfig+0xb10>
 80012fe:	4b4e      	ldr	r3, [pc, #312]	; (8001438 <HAL_RCC_OscConfig+0xc44>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	e01b      	b.n	800133c <HAL_RCC_OscConfig+0xb48>
 8001304:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001308:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800130c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	fa93 f2a3 	rbit	r2, r3
 8001318:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001322:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	fa93 f2a3 	rbit	r2, r3
 8001332:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	4b3f      	ldr	r3, [pc, #252]	; (8001438 <HAL_RCC_OscConfig+0xc44>)
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001340:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001344:	6011      	str	r1, [r2, #0]
 8001346:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	fa92 f1a2 	rbit	r1, r2
 8001350:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001354:	6011      	str	r1, [r2, #0]
  return result;
 8001356:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800135a:	6812      	ldr	r2, [r2, #0]
 800135c:	fab2 f282 	clz	r2, r2
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	f042 0220 	orr.w	r2, r2, #32
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	f002 021f 	and.w	r2, r2, #31
 800136c:	2101      	movs	r1, #1
 800136e:	fa01 f202 	lsl.w	r2, r1, r2
 8001372:	4013      	ands	r3, r2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d19e      	bne.n	80012b6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001378:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <HAL_RCC_OscConfig+0xc44>)
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	f023 020f 	bic.w	r2, r3, #15
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	492c      	ldr	r1, [pc, #176]	; (8001438 <HAL_RCC_OscConfig+0xc44>)
 8001388:	4313      	orrs	r3, r2
 800138a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800138c:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <HAL_RCC_OscConfig+0xc44>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6a19      	ldr	r1, [r3, #32]
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	430b      	orrs	r3, r1
 80013a2:	4925      	ldr	r1, [pc, #148]	; (8001438 <HAL_RCC_OscConfig+0xc44>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
 80013a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	fa93 f2a3 	rbit	r2, r3
 80013bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013c0:	601a      	str	r2, [r3, #0]
  return result;
 80013c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013c6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c8:	fab3 f383 	clz	r3, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	461a      	mov	r2, r3
 80013da:	2301      	movs	r3, #1
 80013dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7fe ff53 	bl	8000288 <HAL_GetTick>
 80013e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e6:	e009      	b.n	80013fc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e8:	f7fe ff4e 	bl	8000288 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e109      	b.n	8001610 <HAL_RCC_OscConfig+0xe1c>
 80013fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	fa93 f2a3 	rbit	r2, r3
 8001410:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001414:	601a      	str	r2, [r3, #0]
  return result;
 8001416:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800141a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	095b      	lsrs	r3, r3, #5
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b01      	cmp	r3, #1
 800142e:	d105      	bne.n	800143c <HAL_RCC_OscConfig+0xc48>
 8001430:	4b01      	ldr	r3, [pc, #4]	; (8001438 <HAL_RCC_OscConfig+0xc44>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	e01e      	b.n	8001474 <HAL_RCC_OscConfig+0xc80>
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001440:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001444:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	fa93 f2a3 	rbit	r2, r3
 8001450:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800145a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	fa93 f2a3 	rbit	r2, r3
 800146a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	4b6a      	ldr	r3, [pc, #424]	; (800161c <HAL_RCC_OscConfig+0xe28>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001478:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800147c:	6011      	str	r1, [r2, #0]
 800147e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	fa92 f1a2 	rbit	r1, r2
 8001488:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800148c:	6011      	str	r1, [r2, #0]
  return result;
 800148e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	fab2 f282 	clz	r2, r2
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	f042 0220 	orr.w	r2, r2, #32
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	f002 021f 	and.w	r2, r2, #31
 80014a4:	2101      	movs	r1, #1
 80014a6:	fa01 f202 	lsl.w	r2, r1, r2
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d09b      	beq.n	80013e8 <HAL_RCC_OscConfig+0xbf4>
 80014b0:	e0ad      	b.n	800160e <HAL_RCC_OscConfig+0xe1a>
 80014b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	fa93 f2a3 	rbit	r2, r3
 80014c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ca:	601a      	str	r2, [r3, #0]
  return result;
 80014cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d2:	fab3 f383 	clz	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	461a      	mov	r2, r3
 80014e4:	2300      	movs	r3, #0
 80014e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7fe fece 	bl	8000288 <HAL_GetTick>
 80014ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f0:	e009      	b.n	8001506 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f2:	f7fe fec9 	bl	8000288 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e084      	b.n	8001610 <HAL_RCC_OscConfig+0xe1c>
 8001506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800150a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800150e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	fa93 f2a3 	rbit	r2, r3
 800151a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800151e:	601a      	str	r2, [r3, #0]
  return result;
 8001520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001524:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001526:	fab3 f383 	clz	r3, r3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	095b      	lsrs	r3, r3, #5
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d102      	bne.n	8001540 <HAL_RCC_OscConfig+0xd4c>
 800153a:	4b38      	ldr	r3, [pc, #224]	; (800161c <HAL_RCC_OscConfig+0xe28>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	e01b      	b.n	8001578 <HAL_RCC_OscConfig+0xd84>
 8001540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001544:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	fa93 f2a3 	rbit	r2, r3
 8001554:	f107 0320 	add.w	r3, r7, #32
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	fa93 f2a3 	rbit	r2, r3
 800156e:	f107 0318 	add.w	r3, r7, #24
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	4b29      	ldr	r3, [pc, #164]	; (800161c <HAL_RCC_OscConfig+0xe28>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	f107 0214 	add.w	r2, r7, #20
 800157c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001580:	6011      	str	r1, [r2, #0]
 8001582:	f107 0214 	add.w	r2, r7, #20
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	fa92 f1a2 	rbit	r1, r2
 800158c:	f107 0210 	add.w	r2, r7, #16
 8001590:	6011      	str	r1, [r2, #0]
  return result;
 8001592:	f107 0210 	add.w	r2, r7, #16
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	fab2 f282 	clz	r2, r2
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	f042 0220 	orr.w	r2, r2, #32
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	f002 021f 	and.w	r2, r2, #31
 80015a8:	2101      	movs	r1, #1
 80015aa:	fa01 f202 	lsl.w	r2, r1, r2
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d19e      	bne.n	80014f2 <HAL_RCC_OscConfig+0xcfe>
 80015b4:	e02b      	b.n	800160e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e025      	b.n	8001610 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_RCC_OscConfig+0xe28>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_RCC_OscConfig+0xe28>)
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80015d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80015d8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d111      	bne.n	800160a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80015e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80015ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d108      	bne.n	800160a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80015f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015fc:	f003 020f 	and.w	r2, r3, #15
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001606:	429a      	cmp	r2, r3
 8001608:	d001      	beq.n	800160e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000

08001620 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b09e      	sub	sp, #120	; 0x78
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e162      	b.n	80018fe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001638:	4b90      	ldr	r3, [pc, #576]	; (800187c <HAL_RCC_ClockConfig+0x25c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d910      	bls.n	8001668 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001646:	4b8d      	ldr	r3, [pc, #564]	; (800187c <HAL_RCC_ClockConfig+0x25c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 0207 	bic.w	r2, r3, #7
 800164e:	498b      	ldr	r1, [pc, #556]	; (800187c <HAL_RCC_ClockConfig+0x25c>)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	4313      	orrs	r3, r2
 8001654:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001656:	4b89      	ldr	r3, [pc, #548]	; (800187c <HAL_RCC_ClockConfig+0x25c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d001      	beq.n	8001668 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e14a      	b.n	80018fe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001674:	4b82      	ldr	r3, [pc, #520]	; (8001880 <HAL_RCC_ClockConfig+0x260>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	497f      	ldr	r1, [pc, #508]	; (8001880 <HAL_RCC_ClockConfig+0x260>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80dc 	beq.w	800184c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d13c      	bne.n	8001716 <HAL_RCC_ClockConfig+0xf6>
 800169c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016a4:	fa93 f3a3 	rbit	r3, r3
 80016a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80016aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ac:	fab3 f383 	clz	r3, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d102      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xa6>
 80016c0:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <HAL_RCC_ClockConfig+0x260>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	e00f      	b.n	80016e6 <HAL_RCC_ClockConfig+0xc6>
 80016c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016ce:	fa93 f3a3 	rbit	r3, r3
 80016d2:	667b      	str	r3, [r7, #100]	; 0x64
 80016d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d8:	663b      	str	r3, [r7, #96]	; 0x60
 80016da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80016e2:	4b67      	ldr	r3, [pc, #412]	; (8001880 <HAL_RCC_ClockConfig+0x260>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016ea:	65ba      	str	r2, [r7, #88]	; 0x58
 80016ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80016ee:	fa92 f2a2 	rbit	r2, r2
 80016f2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80016f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016f6:	fab2 f282 	clz	r2, r2
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	f042 0220 	orr.w	r2, r2, #32
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	f002 021f 	and.w	r2, r2, #31
 8001706:	2101      	movs	r1, #1
 8001708:	fa01 f202 	lsl.w	r2, r1, r2
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d17b      	bne.n	800180a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0f3      	b.n	80018fe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d13c      	bne.n	8001798 <HAL_RCC_ClockConfig+0x178>
 800171e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001722:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800172c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	095b      	lsrs	r3, r3, #5
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d102      	bne.n	8001748 <HAL_RCC_ClockConfig+0x128>
 8001742:	4b4f      	ldr	r3, [pc, #316]	; (8001880 <HAL_RCC_ClockConfig+0x260>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	e00f      	b.n	8001768 <HAL_RCC_ClockConfig+0x148>
 8001748:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800174c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001750:	fa93 f3a3 	rbit	r3, r3
 8001754:	647b      	str	r3, [r7, #68]	; 0x44
 8001756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800175a:	643b      	str	r3, [r7, #64]	; 0x40
 800175c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800175e:	fa93 f3a3 	rbit	r3, r3
 8001762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001764:	4b46      	ldr	r3, [pc, #280]	; (8001880 <HAL_RCC_ClockConfig+0x260>)
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800176c:	63ba      	str	r2, [r7, #56]	; 0x38
 800176e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001770:	fa92 f2a2 	rbit	r2, r2
 8001774:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001778:	fab2 f282 	clz	r2, r2
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	f042 0220 	orr.w	r2, r2, #32
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	f002 021f 	and.w	r2, r2, #31
 8001788:	2101      	movs	r1, #1
 800178a:	fa01 f202 	lsl.w	r2, r1, r2
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d13a      	bne.n	800180a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0b2      	b.n	80018fe <HAL_RCC_ClockConfig+0x2de>
 8001798:	2302      	movs	r3, #2
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179e:	fa93 f3a3 	rbit	r3, r3
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a6:	fab3 f383 	clz	r3, r3
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	095b      	lsrs	r3, r3, #5
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d102      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x1a0>
 80017ba:	4b31      	ldr	r3, [pc, #196]	; (8001880 <HAL_RCC_ClockConfig+0x260>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e00d      	b.n	80017dc <HAL_RCC_ClockConfig+0x1bc>
 80017c0:	2302      	movs	r3, #2
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
 80017cc:	2302      	movs	r3, #2
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	4b29      	ldr	r3, [pc, #164]	; (8001880 <HAL_RCC_ClockConfig+0x260>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	2202      	movs	r2, #2
 80017de:	61ba      	str	r2, [r7, #24]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	fa92 f2a2 	rbit	r2, r2
 80017e6:	617a      	str	r2, [r7, #20]
  return result;
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	fab2 f282 	clz	r2, r2
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f042 0220 	orr.w	r2, r2, #32
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f002 021f 	and.w	r2, r2, #31
 80017fa:	2101      	movs	r1, #1
 80017fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001800:	4013      	ands	r3, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e079      	b.n	80018fe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_RCC_ClockConfig+0x260>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	491a      	ldr	r1, [pc, #104]	; (8001880 <HAL_RCC_ClockConfig+0x260>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800181c:	f7fe fd34 	bl	8000288 <HAL_GetTick>
 8001820:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7fe fd30 	bl	8000288 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e061      	b.n	80018fe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_RCC_ClockConfig+0x260>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_ClockConfig+0x25c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d214      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_RCC_ClockConfig+0x25c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 0207 	bic.w	r2, r3, #7
 8001862:	4906      	ldr	r1, [pc, #24]	; (800187c <HAL_RCC_ClockConfig+0x25c>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <HAL_RCC_ClockConfig+0x25c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d005      	beq.n	8001884 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e040      	b.n	80018fe <HAL_RCC_ClockConfig+0x2de>
 800187c:	40022000 	.word	0x40022000
 8001880:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_RCC_ClockConfig+0x2e8>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	491a      	ldr	r1, [pc, #104]	; (8001908 <HAL_RCC_ClockConfig+0x2e8>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_RCC_ClockConfig+0x2e8>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4912      	ldr	r1, [pc, #72]	; (8001908 <HAL_RCC_ClockConfig+0x2e8>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018c2:	f000 f829 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018c6:	4601      	mov	r1, r0
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_RCC_ClockConfig+0x2e8>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018d0:	22f0      	movs	r2, #240	; 0xf0
 80018d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	fa92 f2a2 	rbit	r2, r2
 80018da:	60fa      	str	r2, [r7, #12]
  return result;
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	fab2 f282 	clz	r2, r2
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	40d3      	lsrs	r3, r2
 80018e6:	4a09      	ldr	r2, [pc, #36]	; (800190c <HAL_RCC_ClockConfig+0x2ec>)
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	fa21 f303 	lsr.w	r3, r1, r3
 80018ee:	4a08      	ldr	r2, [pc, #32]	; (8001910 <HAL_RCC_ClockConfig+0x2f0>)
 80018f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_RCC_ClockConfig+0x2f4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fc82 	bl	8000200 <HAL_InitTick>
  
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3778      	adds	r7, #120	; 0x78
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	08003a34 	.word	0x08003a34
 8001910:	20000008 	.word	0x20000008
 8001914:	20000000 	.word	0x20000000

08001918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b08b      	sub	sp, #44	; 0x2c
 800191c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001932:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b04      	cmp	r3, #4
 8001940:	d002      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x30>
 8001942:	2b08      	cmp	r3, #8
 8001944:	d003      	beq.n	800194e <HAL_RCC_GetSysClockFreq+0x36>
 8001946:	e03f      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800194a:	623b      	str	r3, [r7, #32]
      break;
 800194c:	e03f      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001954:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001958:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	fa92 f2a2 	rbit	r2, r2
 8001960:	607a      	str	r2, [r7, #4]
  return result;
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	fab2 f282 	clz	r2, r2
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	40d3      	lsrs	r3, r2
 800196c:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800196e:	5cd3      	ldrb	r3, [r2, r3]
 8001970:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_RCC_GetSysClockFreq+0xc4>)
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	220f      	movs	r2, #15
 800197c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	fa92 f2a2 	rbit	r2, r2
 8001984:	60fa      	str	r2, [r7, #12]
  return result;
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	fab2 f282 	clz	r2, r2
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	40d3      	lsrs	r3, r2
 8001990:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019a0:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
 80019b0:	e007      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	fb02 f303 	mul.w	r3, r2, r3
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	623b      	str	r3, [r7, #32]
      break;
 80019c6:	e002      	b.n	80019ce <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80019ca:	623b      	str	r3, [r7, #32]
      break;
 80019cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ce:	6a3b      	ldr	r3, [r7, #32]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	372c      	adds	r7, #44	; 0x2c
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000
 80019e0:	007a1200 	.word	0x007a1200
 80019e4:	08003a14 	.word	0x08003a14
 80019e8:	08003a24 	.word	0x08003a24

080019ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008

08001a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a0a:	f7ff ffef 	bl	80019ec <HAL_RCC_GetHCLKFreq>
 8001a0e:	4601      	mov	r1, r0
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a18:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	fa92 f2a2 	rbit	r2, r2
 8001a24:	603a      	str	r2, [r7, #0]
  return result;
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	fab2 f282 	clz	r2, r2
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	40d3      	lsrs	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001a32:	5cd3      	ldrb	r3, [r2, r3]
 8001a34:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	08003a44 	.word	0x08003a44

08001a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001a4e:	f7ff ffcd 	bl	80019ec <HAL_RCC_GetHCLKFreq>
 8001a52:	4601      	mov	r1, r0
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001a5c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	fa92 f2a2 	rbit	r2, r2
 8001a68:	603a      	str	r2, [r7, #0]
  return result;
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	fab2 f282 	clz	r2, r2
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	40d3      	lsrs	r3, r2
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	08003a44 	.word	0x08003a44

08001a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b092      	sub	sp, #72	; 0x48
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80d7 	beq.w	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab0:	4b4e      	ldr	r3, [pc, #312]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10e      	bne.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001abc:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	4a4a      	ldr	r2, [pc, #296]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	61d3      	str	r3, [r2, #28]
 8001ac8:	4b48      	ldr	r3, [pc, #288]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ada:	4b45      	ldr	r3, [pc, #276]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d118      	bne.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae6:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a41      	ldr	r2, [pc, #260]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af2:	f7fe fbc9 	bl	8000288 <HAL_GetTick>
 8001af6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	e008      	b.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afa:	f7fe fbc5 	bl	8000288 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b64      	cmp	r3, #100	; 0x64
 8001b06:	d901      	bls.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e1d6      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b18:	4b34      	ldr	r3, [pc, #208]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b20:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8084 	beq.w	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d07c      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b38:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b52:	fab3 f383 	clz	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	461a      	mov	r2, r3
 8001b62:	2301      	movs	r3, #1
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6e:	fa93 f3a3 	rbit	r3, r3
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b76:	fab3 f383 	clz	r3, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	461a      	mov	r2, r3
 8001b86:	2300      	movs	r3, #0
 8001b88:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b8a:	4a18      	ldr	r2, [pc, #96]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b8e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d04b      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7fe fb75 	bl	8000288 <HAL_GetTick>
 8001b9e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7fe fb71 	bl	8000288 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e180      	b.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bbe:	fa93 f3a3 	rbit	r3, r3
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	623b      	str	r3, [r7, #32]
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	61fb      	str	r3, [r7, #28]
  return result;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	095b      	lsrs	r3, r3, #5
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d108      	bne.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001be6:	4b01      	ldr	r3, [pc, #4]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	e00d      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	10908100 	.word	0x10908100
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	4ba0      	ldr	r3, [pc, #640]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	2202      	movs	r2, #2
 8001c0a:	613a      	str	r2, [r7, #16]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	fa92 f2a2 	rbit	r2, r2
 8001c12:	60fa      	str	r2, [r7, #12]
  return result;
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	fab2 f282 	clz	r2, r2
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f002 021f 	and.w	r2, r2, #31
 8001c26:	2101      	movs	r1, #1
 8001c28:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0b7      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001c32:	4b95      	ldr	r3, [pc, #596]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	4992      	ldr	r1, [pc, #584]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d105      	bne.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4c:	4b8e      	ldr	r3, [pc, #568]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	4a8d      	ldr	r2, [pc, #564]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c64:	4b88      	ldr	r3, [pc, #544]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f023 0203 	bic.w	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4985      	ldr	r1, [pc, #532]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d008      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c82:	4b81      	ldr	r3, [pc, #516]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	497e      	ldr	r1, [pc, #504]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ca0:	4b79      	ldr	r3, [pc, #484]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	4976      	ldr	r1, [pc, #472]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d008      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cbe:	4b72      	ldr	r3, [pc, #456]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	f023 0210 	bic.w	r2, r3, #16
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	496f      	ldr	r1, [pc, #444]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce8:	4967      	ldr	r1, [pc, #412]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cfa:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f023 0220 	bic.w	r2, r3, #32
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4960      	ldr	r1, [pc, #384]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d18:	4b5b      	ldr	r3, [pc, #364]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	4958      	ldr	r1, [pc, #352]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d008      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d36:	4b54      	ldr	r3, [pc, #336]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	4951      	ldr	r1, [pc, #324]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d008      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d54:	4b4c      	ldr	r3, [pc, #304]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	4949      	ldr	r1, [pc, #292]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d008      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d72:	4b45      	ldr	r3, [pc, #276]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4942      	ldr	r1, [pc, #264]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001d90:	4b3d      	ldr	r3, [pc, #244]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	493a      	ldr	r1, [pc, #232]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d008      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001dae:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	4933      	ldr	r1, [pc, #204]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001dcc:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd8:	492b      	ldr	r1, [pc, #172]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001dea:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4924      	ldr	r1, [pc, #144]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8001e08:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e14:	491c      	ldr	r1, [pc, #112]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d008      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e32:	4915      	ldr	r1, [pc, #84]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d008      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	490d      	ldr	r1, [pc, #52]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e6e:	4906      	ldr	r1, [pc, #24]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00c      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8001e80:	4b01      	ldr	r3, [pc, #4]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	e002      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e94:	490b      	ldr	r1, [pc, #44]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d008      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb2:	4904      	ldr	r1, [pc, #16]	; (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3748      	adds	r7, #72	; 0x48
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e040      	b.n	8001f5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 ff4a 	bl	8002d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2224      	movs	r2, #36	; 0x24
 8001ef4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f98c 	bl	8002224 <UART_SetConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e022      	b.n	8001f5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fb9a 	bl	8002658 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fc21 	bl	800279c <UART_CheckIdleState>
 8001f5a:	4603      	mov	r3, r0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	; 0x28
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	f040 8081 	bne.w	8002080 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_UART_Transmit+0x26>
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e079      	b.n	8002082 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_UART_Transmit+0x38>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e072      	b.n	8002082 <HAL_UART_Transmit+0x11e>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2221      	movs	r2, #33	; 0x21
 8001fae:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001fb0:	f7fe f96a 	bl	8000288 <HAL_GetTick>
 8001fb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	88fa      	ldrh	r2, [r7, #6]
 8001fba:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fce:	d108      	bne.n	8001fe2 <HAL_UART_Transmit+0x7e>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d104      	bne.n	8001fe2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	e003      	b.n	8001fea <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fea:	e02d      	b.n	8002048 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fc15 	bl	8002826 <UART_WaitOnFlagUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e03d      	b.n	8002082 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10b      	bne.n	8002024 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	881a      	ldrh	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002018:	b292      	uxth	r2, r2
 800201a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	3302      	adds	r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
 8002022:	e008      	b.n	8002036 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	b292      	uxth	r2, r2
 800202e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	3301      	adds	r3, #1
 8002034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800204e:	b29b      	uxth	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1cb      	bne.n	8001fec <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2200      	movs	r2, #0
 800205c:	2140      	movs	r1, #64	; 0x40
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fbe1 	bl	8002826 <UART_WaitOnFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e009      	b.n	8002082 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2220      	movs	r2, #32
 8002072:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b08a      	sub	sp, #40	; 0x28
 800208e:	af02      	add	r7, sp, #8
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	4613      	mov	r3, r2
 8002098:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800209e:	2b20      	cmp	r3, #32
 80020a0:	f040 80bb 	bne.w	800221a <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_UART_Receive+0x26>
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0b3      	b.n	800221c <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_UART_Receive+0x38>
 80020be:	2302      	movs	r3, #2
 80020c0:	e0ac      	b.n	800221c <HAL_UART_Receive+0x192>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2222      	movs	r2, #34	; 0x22
 80020d4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80020d6:	f7fe f8d7 	bl	8000288 <HAL_GetTick>
 80020da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	88fa      	ldrh	r2, [r7, #6]
 80020e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	88fa      	ldrh	r2, [r7, #6]
 80020e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f4:	d10e      	bne.n	8002114 <HAL_UART_Receive+0x8a>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d105      	bne.n	800210a <HAL_UART_Receive+0x80>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002104:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002108:	e02d      	b.n	8002166 <HAL_UART_Receive+0xdc>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	22ff      	movs	r2, #255	; 0xff
 800210e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002112:	e028      	b.n	8002166 <HAL_UART_Receive+0xdc>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10d      	bne.n	8002138 <HAL_UART_Receive+0xae>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d104      	bne.n	800212e <HAL_UART_Receive+0xa4>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	22ff      	movs	r2, #255	; 0xff
 8002128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800212c:	e01b      	b.n	8002166 <HAL_UART_Receive+0xdc>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	227f      	movs	r2, #127	; 0x7f
 8002132:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002136:	e016      	b.n	8002166 <HAL_UART_Receive+0xdc>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002140:	d10d      	bne.n	800215e <HAL_UART_Receive+0xd4>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d104      	bne.n	8002154 <HAL_UART_Receive+0xca>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	227f      	movs	r2, #127	; 0x7f
 800214e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002152:	e008      	b.n	8002166 <HAL_UART_Receive+0xdc>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	223f      	movs	r2, #63	; 0x3f
 8002158:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800215c:	e003      	b.n	8002166 <HAL_UART_Receive+0xdc>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800216c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002176:	d108      	bne.n	800218a <HAL_UART_Receive+0x100>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d104      	bne.n	800218a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	e003      	b.n	8002192 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002192:	e033      	b.n	80021fc <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	2200      	movs	r2, #0
 800219c:	2120      	movs	r1, #32
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fb41 	bl	8002826 <UART_WaitOnFlagUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e036      	b.n	800221c <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10c      	bne.n	80021ce <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	8a7b      	ldrh	r3, [r7, #18]
 80021be:	4013      	ands	r3, r2
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	3302      	adds	r3, #2
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	e00d      	b.n	80021ea <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	8a7b      	ldrh	r3, [r7, #18]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	4013      	ands	r3, r2
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	3301      	adds	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1c5      	bne.n	8002194 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800221a:	2302      	movs	r3, #2
  }
}
 800221c:	4618      	mov	r0, r3
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800222c:	2300      	movs	r3, #0
 800222e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4bac      	ldr	r3, [pc, #688]	; (8002504 <UART_SetConfig+0x2e0>)
 8002254:	4013      	ands	r3, r2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	6939      	ldr	r1, [r7, #16]
 800225c:	430b      	orrs	r3, r1
 800225e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	430a      	orrs	r2, r1
 8002298:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a9a      	ldr	r2, [pc, #616]	; (8002508 <UART_SetConfig+0x2e4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d121      	bne.n	80022e8 <UART_SetConfig+0xc4>
 80022a4:	4b99      	ldr	r3, [pc, #612]	; (800250c <UART_SetConfig+0x2e8>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d817      	bhi.n	80022e0 <UART_SetConfig+0xbc>
 80022b0:	a201      	add	r2, pc, #4	; (adr r2, 80022b8 <UART_SetConfig+0x94>)
 80022b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b6:	bf00      	nop
 80022b8:	080022c9 	.word	0x080022c9
 80022bc:	080022d5 	.word	0x080022d5
 80022c0:	080022db 	.word	0x080022db
 80022c4:	080022cf 	.word	0x080022cf
 80022c8:	2301      	movs	r3, #1
 80022ca:	77fb      	strb	r3, [r7, #31]
 80022cc:	e0b2      	b.n	8002434 <UART_SetConfig+0x210>
 80022ce:	2302      	movs	r3, #2
 80022d0:	77fb      	strb	r3, [r7, #31]
 80022d2:	e0af      	b.n	8002434 <UART_SetConfig+0x210>
 80022d4:	2304      	movs	r3, #4
 80022d6:	77fb      	strb	r3, [r7, #31]
 80022d8:	e0ac      	b.n	8002434 <UART_SetConfig+0x210>
 80022da:	2308      	movs	r3, #8
 80022dc:	77fb      	strb	r3, [r7, #31]
 80022de:	e0a9      	b.n	8002434 <UART_SetConfig+0x210>
 80022e0:	2310      	movs	r3, #16
 80022e2:	77fb      	strb	r3, [r7, #31]
 80022e4:	bf00      	nop
 80022e6:	e0a5      	b.n	8002434 <UART_SetConfig+0x210>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a88      	ldr	r2, [pc, #544]	; (8002510 <UART_SetConfig+0x2ec>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d123      	bne.n	800233a <UART_SetConfig+0x116>
 80022f2:	4b86      	ldr	r3, [pc, #536]	; (800250c <UART_SetConfig+0x2e8>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fe:	d012      	beq.n	8002326 <UART_SetConfig+0x102>
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d802      	bhi.n	800230c <UART_SetConfig+0xe8>
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <UART_SetConfig+0xf6>
 800230a:	e012      	b.n	8002332 <UART_SetConfig+0x10e>
 800230c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002310:	d00c      	beq.n	800232c <UART_SetConfig+0x108>
 8002312:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002316:	d003      	beq.n	8002320 <UART_SetConfig+0xfc>
 8002318:	e00b      	b.n	8002332 <UART_SetConfig+0x10e>
 800231a:	2300      	movs	r3, #0
 800231c:	77fb      	strb	r3, [r7, #31]
 800231e:	e089      	b.n	8002434 <UART_SetConfig+0x210>
 8002320:	2302      	movs	r3, #2
 8002322:	77fb      	strb	r3, [r7, #31]
 8002324:	e086      	b.n	8002434 <UART_SetConfig+0x210>
 8002326:	2304      	movs	r3, #4
 8002328:	77fb      	strb	r3, [r7, #31]
 800232a:	e083      	b.n	8002434 <UART_SetConfig+0x210>
 800232c:	2308      	movs	r3, #8
 800232e:	77fb      	strb	r3, [r7, #31]
 8002330:	e080      	b.n	8002434 <UART_SetConfig+0x210>
 8002332:	2310      	movs	r3, #16
 8002334:	77fb      	strb	r3, [r7, #31]
 8002336:	bf00      	nop
 8002338:	e07c      	b.n	8002434 <UART_SetConfig+0x210>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a75      	ldr	r2, [pc, #468]	; (8002514 <UART_SetConfig+0x2f0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d123      	bne.n	800238c <UART_SetConfig+0x168>
 8002344:	4b71      	ldr	r3, [pc, #452]	; (800250c <UART_SetConfig+0x2e8>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800234c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002350:	d012      	beq.n	8002378 <UART_SetConfig+0x154>
 8002352:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002356:	d802      	bhi.n	800235e <UART_SetConfig+0x13a>
 8002358:	2b00      	cmp	r3, #0
 800235a:	d007      	beq.n	800236c <UART_SetConfig+0x148>
 800235c:	e012      	b.n	8002384 <UART_SetConfig+0x160>
 800235e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002362:	d00c      	beq.n	800237e <UART_SetConfig+0x15a>
 8002364:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002368:	d003      	beq.n	8002372 <UART_SetConfig+0x14e>
 800236a:	e00b      	b.n	8002384 <UART_SetConfig+0x160>
 800236c:	2300      	movs	r3, #0
 800236e:	77fb      	strb	r3, [r7, #31]
 8002370:	e060      	b.n	8002434 <UART_SetConfig+0x210>
 8002372:	2302      	movs	r3, #2
 8002374:	77fb      	strb	r3, [r7, #31]
 8002376:	e05d      	b.n	8002434 <UART_SetConfig+0x210>
 8002378:	2304      	movs	r3, #4
 800237a:	77fb      	strb	r3, [r7, #31]
 800237c:	e05a      	b.n	8002434 <UART_SetConfig+0x210>
 800237e:	2308      	movs	r3, #8
 8002380:	77fb      	strb	r3, [r7, #31]
 8002382:	e057      	b.n	8002434 <UART_SetConfig+0x210>
 8002384:	2310      	movs	r3, #16
 8002386:	77fb      	strb	r3, [r7, #31]
 8002388:	bf00      	nop
 800238a:	e053      	b.n	8002434 <UART_SetConfig+0x210>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a61      	ldr	r2, [pc, #388]	; (8002518 <UART_SetConfig+0x2f4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d123      	bne.n	80023de <UART_SetConfig+0x1ba>
 8002396:	4b5d      	ldr	r3, [pc, #372]	; (800250c <UART_SetConfig+0x2e8>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800239e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a2:	d012      	beq.n	80023ca <UART_SetConfig+0x1a6>
 80023a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a8:	d802      	bhi.n	80023b0 <UART_SetConfig+0x18c>
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d007      	beq.n	80023be <UART_SetConfig+0x19a>
 80023ae:	e012      	b.n	80023d6 <UART_SetConfig+0x1b2>
 80023b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023b4:	d00c      	beq.n	80023d0 <UART_SetConfig+0x1ac>
 80023b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80023ba:	d003      	beq.n	80023c4 <UART_SetConfig+0x1a0>
 80023bc:	e00b      	b.n	80023d6 <UART_SetConfig+0x1b2>
 80023be:	2300      	movs	r3, #0
 80023c0:	77fb      	strb	r3, [r7, #31]
 80023c2:	e037      	b.n	8002434 <UART_SetConfig+0x210>
 80023c4:	2302      	movs	r3, #2
 80023c6:	77fb      	strb	r3, [r7, #31]
 80023c8:	e034      	b.n	8002434 <UART_SetConfig+0x210>
 80023ca:	2304      	movs	r3, #4
 80023cc:	77fb      	strb	r3, [r7, #31]
 80023ce:	e031      	b.n	8002434 <UART_SetConfig+0x210>
 80023d0:	2308      	movs	r3, #8
 80023d2:	77fb      	strb	r3, [r7, #31]
 80023d4:	e02e      	b.n	8002434 <UART_SetConfig+0x210>
 80023d6:	2310      	movs	r3, #16
 80023d8:	77fb      	strb	r3, [r7, #31]
 80023da:	bf00      	nop
 80023dc:	e02a      	b.n	8002434 <UART_SetConfig+0x210>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a4e      	ldr	r2, [pc, #312]	; (800251c <UART_SetConfig+0x2f8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d123      	bne.n	8002430 <UART_SetConfig+0x20c>
 80023e8:	4b48      	ldr	r3, [pc, #288]	; (800250c <UART_SetConfig+0x2e8>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80023f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023f4:	d012      	beq.n	800241c <UART_SetConfig+0x1f8>
 80023f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023fa:	d802      	bhi.n	8002402 <UART_SetConfig+0x1de>
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <UART_SetConfig+0x1ec>
 8002400:	e012      	b.n	8002428 <UART_SetConfig+0x204>
 8002402:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002406:	d00c      	beq.n	8002422 <UART_SetConfig+0x1fe>
 8002408:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800240c:	d003      	beq.n	8002416 <UART_SetConfig+0x1f2>
 800240e:	e00b      	b.n	8002428 <UART_SetConfig+0x204>
 8002410:	2300      	movs	r3, #0
 8002412:	77fb      	strb	r3, [r7, #31]
 8002414:	e00e      	b.n	8002434 <UART_SetConfig+0x210>
 8002416:	2302      	movs	r3, #2
 8002418:	77fb      	strb	r3, [r7, #31]
 800241a:	e00b      	b.n	8002434 <UART_SetConfig+0x210>
 800241c:	2304      	movs	r3, #4
 800241e:	77fb      	strb	r3, [r7, #31]
 8002420:	e008      	b.n	8002434 <UART_SetConfig+0x210>
 8002422:	2308      	movs	r3, #8
 8002424:	77fb      	strb	r3, [r7, #31]
 8002426:	e005      	b.n	8002434 <UART_SetConfig+0x210>
 8002428:	2310      	movs	r3, #16
 800242a:	77fb      	strb	r3, [r7, #31]
 800242c:	bf00      	nop
 800242e:	e001      	b.n	8002434 <UART_SetConfig+0x210>
 8002430:	2310      	movs	r3, #16
 8002432:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800243c:	f040 8090 	bne.w	8002560 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8002440:	7ffb      	ldrb	r3, [r7, #31]
 8002442:	2b08      	cmp	r3, #8
 8002444:	d86c      	bhi.n	8002520 <UART_SetConfig+0x2fc>
 8002446:	a201      	add	r2, pc, #4	; (adr r2, 800244c <UART_SetConfig+0x228>)
 8002448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244c:	08002471 	.word	0x08002471
 8002450:	08002491 	.word	0x08002491
 8002454:	080024b1 	.word	0x080024b1
 8002458:	08002521 	.word	0x08002521
 800245c:	080024cd 	.word	0x080024cd
 8002460:	08002521 	.word	0x08002521
 8002464:	08002521 	.word	0x08002521
 8002468:	08002521 	.word	0x08002521
 800246c:	080024ed 	.word	0x080024ed
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002470:	f7ff fac8 	bl	8001a04 <HAL_RCC_GetPCLK1Freq>
 8002474:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	005a      	lsls	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	441a      	add	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	b29b      	uxth	r3, r3
 800248c:	61bb      	str	r3, [r7, #24]
        break;
 800248e:	e04a      	b.n	8002526 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002490:	f7ff fada 	bl	8001a48 <HAL_RCC_GetPCLK2Freq>
 8002494:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	005a      	lsls	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	441a      	add	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	61bb      	str	r3, [r7, #24]
        break;
 80024ae:	e03a      	b.n	8002526 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80024ba:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6852      	ldr	r2, [r2, #4]
 80024c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	61bb      	str	r3, [r7, #24]
        break;
 80024ca:	e02c      	b.n	8002526 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024cc:	f7ff fa24 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80024d0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	005a      	lsls	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	085b      	lsrs	r3, r3, #1
 80024dc:	441a      	add	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	61bb      	str	r3, [r7, #24]
        break;
 80024ea:	e01c      	b.n	8002526 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	b29b      	uxth	r3, r3
 8002500:	61bb      	str	r3, [r7, #24]
        break;
 8002502:	e010      	b.n	8002526 <UART_SetConfig+0x302>
 8002504:	efff69f3 	.word	0xefff69f3
 8002508:	40013800 	.word	0x40013800
 800250c:	40021000 	.word	0x40021000
 8002510:	40004400 	.word	0x40004400
 8002514:	40004800 	.word	0x40004800
 8002518:	40004c00 	.word	0x40004c00
 800251c:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	75fb      	strb	r3, [r7, #23]
        break;
 8002524:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b0f      	cmp	r3, #15
 800252a:	d916      	bls.n	800255a <UART_SetConfig+0x336>
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002532:	d212      	bcs.n	800255a <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f023 030f 	bic.w	r3, r3, #15
 800253c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	085b      	lsrs	r3, r3, #1
 8002542:	b29b      	uxth	r3, r3
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	b29a      	uxth	r2, r3
 800254a:	897b      	ldrh	r3, [r7, #10]
 800254c:	4313      	orrs	r3, r2
 800254e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	897a      	ldrh	r2, [r7, #10]
 8002556:	60da      	str	r2, [r3, #12]
 8002558:	e072      	b.n	8002640 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
 800255e:	e06f      	b.n	8002640 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8002560:	7ffb      	ldrb	r3, [r7, #31]
 8002562:	2b08      	cmp	r3, #8
 8002564:	d85b      	bhi.n	800261e <UART_SetConfig+0x3fa>
 8002566:	a201      	add	r2, pc, #4	; (adr r2, 800256c <UART_SetConfig+0x348>)
 8002568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256c:	08002591 	.word	0x08002591
 8002570:	080025af 	.word	0x080025af
 8002574:	080025cd 	.word	0x080025cd
 8002578:	0800261f 	.word	0x0800261f
 800257c:	080025e9 	.word	0x080025e9
 8002580:	0800261f 	.word	0x0800261f
 8002584:	0800261f 	.word	0x0800261f
 8002588:	0800261f 	.word	0x0800261f
 800258c:	08002607 	.word	0x08002607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002590:	f7ff fa38 	bl	8001a04 <HAL_RCC_GetPCLK1Freq>
 8002594:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	085a      	lsrs	r2, r3, #1
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	441a      	add	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	61bb      	str	r3, [r7, #24]
        break;
 80025ac:	e03a      	b.n	8002624 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025ae:	f7ff fa4b 	bl	8001a48 <HAL_RCC_GetPCLK2Freq>
 80025b2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	085a      	lsrs	r2, r3, #1
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	441a      	add	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	61bb      	str	r3, [r7, #24]
        break;
 80025ca:	e02b      	b.n	8002624 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80025d6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6852      	ldr	r2, [r2, #4]
 80025de:	fbb3 f3f2 	udiv	r3, r3, r2
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	61bb      	str	r3, [r7, #24]
        break;
 80025e6:	e01d      	b.n	8002624 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025e8:	f7ff f996 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80025ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	085a      	lsrs	r2, r3, #1
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	441a      	add	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	b29b      	uxth	r3, r3
 8002602:	61bb      	str	r3, [r7, #24]
        break;
 8002604:	e00e      	b.n	8002624 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	b29b      	uxth	r3, r3
 800261a:	61bb      	str	r3, [r7, #24]
        break;
 800261c:	e002      	b.n	8002624 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	75fb      	strb	r3, [r7, #23]
        break;
 8002622:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b0f      	cmp	r3, #15
 8002628:	d908      	bls.n	800263c <UART_SetConfig+0x418>
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002630:	d204      	bcs.n	800263c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	e001      	b.n	8002640 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800264c:	7dfb      	ldrb	r3, [r7, #23]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop

08002658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01a      	beq.n	800276e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002756:	d10a      	bne.n	800276e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]
  }
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80027aa:	f7fd fd6d 	bl	8000288 <HAL_GetTick>
 80027ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d10e      	bne.n	80027dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f82a 	bl	8002826 <UART_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e020      	b.n	800281e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d10e      	bne.n	8002808 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f814 	bl	8002826 <UART_WaitOnFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e00a      	b.n	800281e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2220      	movs	r2, #32
 8002812:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b084      	sub	sp, #16
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	4613      	mov	r3, r2
 8002834:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002836:	e05d      	b.n	80028f4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283e:	d059      	beq.n	80028f4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002840:	f7fd fd22 	bl	8000288 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	429a      	cmp	r2, r3
 800284e:	d302      	bcc.n	8002856 <UART_WaitOnFlagUntilTimeout+0x30>
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d11b      	bne.n	800288e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002864:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0201 	bic.w	r2, r2, #1
 8002874:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2220      	movs	r2, #32
 8002880:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e042      	b.n	8002914 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d02b      	beq.n	80028f4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028aa:	d123      	bne.n	80028f4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028b4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2220      	movs	r2, #32
 80028e6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e00f      	b.n	8002914 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69da      	ldr	r2, [r3, #28]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	4013      	ands	r3, r2
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	429a      	cmp	r2, r3
 8002902:	bf0c      	ite	eq
 8002904:	2301      	moveq	r3, #1
 8002906:	2300      	movne	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	429a      	cmp	r2, r3
 8002910:	d092      	beq.n	8002838 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b09a      	sub	sp, #104	; 0x68
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002922:	f7fd fc57 	bl	80001d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002926:	f000 f82f 	bl	8002988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800292a:	f000 f8bb 	bl	8002aa4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800292e:	f000 f889 	bl	8002a44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8002932:	4812      	ldr	r0, [pc, #72]	; (800297c <main+0x60>)
 8002934:	f000 f93c 	bl	8002bb0 <RetargetInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Turning on \r\n");
 8002938:	4811      	ldr	r0, [pc, #68]	; (8002980 <main+0x64>)
 800293a:	f000 fb8d 	bl	8003058 <puts>
	  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_SET);
 800293e:	2201      	movs	r2, #1
 8002940:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002948:	f7fd ff3c 	bl	80007c4 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 800294c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002950:	f7fd fca6 	bl	80002a0 <HAL_Delay>
	  printf("Turning off \r\n");
 8002954:	480b      	ldr	r0, [pc, #44]	; (8002984 <main+0x68>)
 8002956:	f000 fb7f 	bl	8003058 <puts>
	  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800295a:	2200      	movs	r2, #0
 800295c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002964:	f7fd ff2e 	bl	80007c4 <HAL_GPIO_WritePin>
	  HAL_Delay(2000);
 8002968:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800296c:	f7fd fc98 	bl	80002a0 <HAL_Delay>
	  break;
 8002970:	bf00      	nop
 8002972:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002974:	4618      	mov	r0, r3
 8002976:	3768      	adds	r7, #104	; 0x68
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	200000b0 	.word	0x200000b0
 8002980:	080039f4 	.word	0x080039f4
 8002984:	08003a04 	.word	0x08003a04

08002988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b0a6      	sub	sp, #152	; 0x98
 800298c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800298e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002992:	2228      	movs	r2, #40	; 0x28
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fafa 	bl	8002f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800299c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	2258      	movs	r2, #88	; 0x58
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 faec 	bl	8002f90 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029b8:	2302      	movs	r3, #2
 80029ba:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029bc:	2301      	movs	r3, #1
 80029be:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029c0:	2310      	movs	r3, #16
 80029c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029c6:	2302      	movs	r3, #2
 80029c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80029d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80029d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fd ff04 	bl	80007f4 <HAL_RCC_OscConfig>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80029f2:	f000 f8d5 	bl	8002ba0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029f6:	230f      	movs	r3, #15
 80029f8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029fa:	2302      	movs	r3, #2
 80029fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a06:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a10:	2102      	movs	r1, #2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fe04 	bl	8001620 <HAL_RCC_ClockConfig>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002a1e:	f000 f8bf 	bl	8002ba0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a22:	2302      	movs	r3, #2
 8002a24:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff f82d 	bl	8001a8c <HAL_RCCEx_PeriphCLKConfig>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002a38:	f000 f8b2 	bl	8002ba0 <Error_Handler>
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	3798      	adds	r7, #152	; 0x98
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <MX_USART2_UART_Init+0x58>)
 8002a4a:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <MX_USART2_UART_Init+0x5c>)
 8002a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <MX_USART2_UART_Init+0x58>)
 8002a50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <MX_USART2_UART_Init+0x58>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <MX_USART2_UART_Init+0x58>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <MX_USART2_UART_Init+0x58>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <MX_USART2_UART_Init+0x58>)
 8002a6a:	220c      	movs	r2, #12
 8002a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <MX_USART2_UART_Init+0x58>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a74:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <MX_USART2_UART_Init+0x58>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a7a:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <MX_USART2_UART_Init+0x58>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <MX_USART2_UART_Init+0x58>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a86:	4805      	ldr	r0, [pc, #20]	; (8002a9c <MX_USART2_UART_Init+0x58>)
 8002a88:	f7ff fa1e 	bl	8001ec8 <HAL_UART_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a92:	f000 f885 	bl	8002ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200000b0 	.word	0x200000b0
 8002aa0:	40004400 	.word	0x40004400

08002aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08a      	sub	sp, #40	; 0x28
 8002aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
 8002ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aba:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <MX_GPIO_Init+0xf0>)
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	4a35      	ldr	r2, [pc, #212]	; (8002b94 <MX_GPIO_Init+0xf0>)
 8002ac0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ac4:	6153      	str	r3, [r2, #20]
 8002ac6:	4b33      	ldr	r3, [pc, #204]	; (8002b94 <MX_GPIO_Init+0xf0>)
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ad2:	4b30      	ldr	r3, [pc, #192]	; (8002b94 <MX_GPIO_Init+0xf0>)
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	4a2f      	ldr	r2, [pc, #188]	; (8002b94 <MX_GPIO_Init+0xf0>)
 8002ad8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002adc:	6153      	str	r3, [r2, #20]
 8002ade:	4b2d      	ldr	r3, [pc, #180]	; (8002b94 <MX_GPIO_Init+0xf0>)
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	4b2a      	ldr	r3, [pc, #168]	; (8002b94 <MX_GPIO_Init+0xf0>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	4a29      	ldr	r2, [pc, #164]	; (8002b94 <MX_GPIO_Init+0xf0>)
 8002af0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af4:	6153      	str	r3, [r2, #20]
 8002af6:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <MX_GPIO_Init+0xf0>)
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <MX_GPIO_Init+0xf0>)
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	4a23      	ldr	r2, [pc, #140]	; (8002b94 <MX_GPIO_Init+0xf0>)
 8002b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b0c:	6153      	str	r3, [r2, #20]
 8002b0e:	4b21      	ldr	r3, [pc, #132]	; (8002b94 <MX_GPIO_Init+0xf0>)
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2120      	movs	r1, #32
 8002b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b22:	f7fd fe4f 	bl	80007c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002b26:	2201      	movs	r2, #1
 8002b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b30:	f7fd fe48 	bl	80007c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <MX_GPIO_Init+0xf4>)
 8002b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b42:	f107 0314 	add.w	r3, r7, #20
 8002b46:	4619      	mov	r1, r3
 8002b48:	4814      	ldr	r0, [pc, #80]	; (8002b9c <MX_GPIO_Init+0xf8>)
 8002b4a:	f7fd fcb1 	bl	80004b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002b4e:	2320      	movs	r3, #32
 8002b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002b5e:	f107 0314 	add.w	r3, r7, #20
 8002b62:	4619      	mov	r1, r3
 8002b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b68:	f7fd fca2 	bl	80004b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002b72:	2311      	movs	r3, #17
 8002b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b88:	f7fd fc92 	bl	80004b0 <HAL_GPIO_Init>

}
 8002b8c:	bf00      	nop
 8002b8e:	3728      	adds	r7, #40	; 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40021000 	.word	0x40021000
 8002b98:	10210000 	.word	0x10210000
 8002b9c:	48000800 	.word	0x48000800

08002ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8002bb8:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <RetargetInit+0x28>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8002bbe:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <RetargetInit+0x2c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6898      	ldr	r0, [r3, #8]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	2100      	movs	r1, #0
 8002bca:	f000 fa4d 	bl	8003068 <setvbuf>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000130 	.word	0x20000130
 8002bdc:	2000000c 	.word	0x2000000c

08002be0 <_isatty>:

int _isatty(int fd) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db04      	blt.n	8002bf8 <_isatty+0x18>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	dc01      	bgt.n	8002bf8 <_isatty+0x18>
    return 1;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e005      	b.n	8002c04 <_isatty+0x24>

  errno = EBADF;
 8002bf8:	f000 f9a0 	bl	8002f3c <__errno>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	2309      	movs	r3, #9
 8002c00:	6013      	str	r3, [r2, #0]
  return 0;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <_write>:

int _write(int fd, char* ptr, int len) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d002      	beq.n	8002c24 <_write+0x18>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d111      	bne.n	8002c48 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <_write+0x54>)
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	f7ff f997 	bl	8001f64 <HAL_UART_Transmit>
 8002c36:	4603      	mov	r3, r0
 8002c38:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <_write+0x38>
      return len;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	e008      	b.n	8002c56 <_write+0x4a>
    else
      return EIO;
 8002c44:	2305      	movs	r3, #5
 8002c46:	e006      	b.n	8002c56 <_write+0x4a>
  }
  errno = EBADF;
 8002c48:	f000 f978 	bl	8002f3c <__errno>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	2309      	movs	r3, #9
 8002c50:	6013      	str	r3, [r2, #0]
  return -1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000130 	.word	0x20000130

08002c64 <_close>:

int _close(int fd) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	db04      	blt.n	8002c7c <_close+0x18>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	dc01      	bgt.n	8002c7c <_close+0x18>
    return 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e006      	b.n	8002c8a <_close+0x26>

  errno = EBADF;
 8002c7c:	f000 f95e 	bl	8002f3c <__errno>
 8002c80:	4602      	mov	r2, r0
 8002c82:	2309      	movs	r3, #9
 8002c84:	6013      	str	r3, [r2, #0]
  return -1;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8002c9e:	f000 f94d 	bl	8002f3c <__errno>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	2309      	movs	r3, #9
 8002ca6:	6013      	str	r3, [r2, #0]
  return -1;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <_read>:

int _read(int fd, char* ptr, int len) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d110      	bne.n	8002ce8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <_read+0x4c>)
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	f04f 33ff 	mov.w	r3, #4294967295
 8002cce:	2201      	movs	r2, #1
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	f7ff f9da 	bl	800208a <HAL_UART_Receive>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <_read+0x30>
      return 1;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e008      	b.n	8002cf6 <_read+0x42>
    else
      return EIO;
 8002ce4:	2305      	movs	r3, #5
 8002ce6:	e006      	b.n	8002cf6 <_read+0x42>
  }
  errno = EBADF;
 8002ce8:	f000 f928 	bl	8002f3c <__errno>
 8002cec:	4602      	mov	r2, r0
 8002cee:	2309      	movs	r3, #9
 8002cf0:	6013      	str	r3, [r2, #0]
  return -1;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000130 	.word	0x20000130

08002d04 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db08      	blt.n	8002d26 <_fstat+0x22>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	dc05      	bgt.n	8002d26 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d20:	605a      	str	r2, [r3, #4]
    return 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e005      	b.n	8002d32 <_fstat+0x2e>
  }

  errno = EBADF;
 8002d26:	f000 f909 	bl	8002f3c <__errno>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	2309      	movs	r3, #9
 8002d2e:	6013      	str	r3, [r2, #0]
  return 0;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d42:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <HAL_MspInit+0x44>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <HAL_MspInit+0x44>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6193      	str	r3, [r2, #24]
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <HAL_MspInit+0x44>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	607b      	str	r3, [r7, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <HAL_MspInit+0x44>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	4a08      	ldr	r2, [pc, #32]	; (8002d80 <HAL_MspInit+0x44>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d64:	61d3      	str	r3, [r2, #28]
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_MspInit+0x44>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d72:	2007      	movs	r0, #7
 8002d74:	f7fd fb68 	bl	8000448 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000

08002d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	; 0x28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <HAL_UART_MspInit+0x7c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d128      	bne.n	8002df8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002da6:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <HAL_UART_MspInit+0x80>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4a16      	ldr	r2, [pc, #88]	; (8002e04 <HAL_UART_MspInit+0x80>)
 8002dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db0:	61d3      	str	r3, [r2, #28]
 8002db2:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <HAL_UART_MspInit+0x80>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <HAL_UART_MspInit+0x80>)
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	4a10      	ldr	r2, [pc, #64]	; (8002e04 <HAL_UART_MspInit+0x80>)
 8002dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc8:	6153      	str	r3, [r2, #20]
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <HAL_UART_MspInit+0x80>)
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002dd6:	230c      	movs	r3, #12
 8002dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002de6:	2307      	movs	r3, #7
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dea:	f107 0314 	add.w	r3, r7, #20
 8002dee:	4619      	mov	r1, r3
 8002df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df4:	f7fd fb5c 	bl	80004b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002df8:	bf00      	nop
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40004400 	.word	0x40004400
 8002e04:	40021000 	.word	0x40021000

08002e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e1a:	e7fe      	b.n	8002e1a <HardFault_Handler+0x4>

08002e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e20:	e7fe      	b.n	8002e20 <MemManage_Handler+0x4>

08002e22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e26:	e7fe      	b.n	8002e26 <BusFault_Handler+0x4>

08002e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e2c:	e7fe      	b.n	8002e2c <UsageFault_Handler+0x4>

08002e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e40:	bf00      	nop
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e5c:	f7fd fa00 	bl	8000260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <_sbrk+0x50>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d102      	bne.n	8002e7a <_sbrk+0x16>
		heap_end = &end;
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <_sbrk+0x50>)
 8002e76:	4a10      	ldr	r2, [pc, #64]	; (8002eb8 <_sbrk+0x54>)
 8002e78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <_sbrk+0x50>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <_sbrk+0x50>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	466a      	mov	r2, sp
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d907      	bls.n	8002e9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002e8e:	f000 f855 	bl	8002f3c <__errno>
 8002e92:	4602      	mov	r2, r0
 8002e94:	230c      	movs	r3, #12
 8002e96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9c:	e006      	b.n	8002eac <_sbrk+0x48>
	}

	heap_end += incr;
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <_sbrk+0x50>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	4a03      	ldr	r2, [pc, #12]	; (8002eb4 <_sbrk+0x50>)
 8002ea8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	2000008c 	.word	0x2000008c
 8002eb8:	20000138 	.word	0x20000138

08002ebc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <SystemInit+0x28>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <SystemInit+0x28>)
 8002ec8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ecc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <SystemInit+0x28>)
 8002ed2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ed6:	609a      	str	r2, [r3, #8]
#endif
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f20 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002eec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002eee:	e003      	b.n	8002ef8 <LoopCopyDataInit>

08002ef0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002ef2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ef4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002ef6:	3104      	adds	r1, #4

08002ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ef8:	480b      	ldr	r0, [pc, #44]	; (8002f28 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002efc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002efe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f00:	d3f6      	bcc.n	8002ef0 <CopyDataInit>
	ldr	r2, =_sbss
 8002f02:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f04:	e002      	b.n	8002f0c <LoopFillZerobss>

08002f06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f08:	f842 3b04 	str.w	r3, [r2], #4

08002f0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f0c:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <LoopForever+0x16>)
	cmp	r2, r3
 8002f0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f10:	d3f9      	bcc.n	8002f06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f12:	f7ff ffd3 	bl	8002ebc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f16:	f000 f817 	bl	8002f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f1a:	f7ff fcff 	bl	800291c <main>

08002f1e <LoopForever>:

LoopForever:
    b LoopForever
 8002f1e:	e7fe      	b.n	8002f1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f20:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002f24:	08003ab8 	.word	0x08003ab8
	ldr	r0, =_sdata
 8002f28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f2c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002f30:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002f34:	20000138 	.word	0x20000138

08002f38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f38:	e7fe      	b.n	8002f38 <ADC1_2_IRQHandler>
	...

08002f3c <__errno>:
 8002f3c:	4b01      	ldr	r3, [pc, #4]	; (8002f44 <__errno+0x8>)
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	2000000c 	.word	0x2000000c

08002f48 <__libc_init_array>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	4e0d      	ldr	r6, [pc, #52]	; (8002f80 <__libc_init_array+0x38>)
 8002f4c:	4c0d      	ldr	r4, [pc, #52]	; (8002f84 <__libc_init_array+0x3c>)
 8002f4e:	1ba4      	subs	r4, r4, r6
 8002f50:	10a4      	asrs	r4, r4, #2
 8002f52:	2500      	movs	r5, #0
 8002f54:	42a5      	cmp	r5, r4
 8002f56:	d109      	bne.n	8002f6c <__libc_init_array+0x24>
 8002f58:	4e0b      	ldr	r6, [pc, #44]	; (8002f88 <__libc_init_array+0x40>)
 8002f5a:	4c0c      	ldr	r4, [pc, #48]	; (8002f8c <__libc_init_array+0x44>)
 8002f5c:	f000 fd3e 	bl	80039dc <_init>
 8002f60:	1ba4      	subs	r4, r4, r6
 8002f62:	10a4      	asrs	r4, r4, #2
 8002f64:	2500      	movs	r5, #0
 8002f66:	42a5      	cmp	r5, r4
 8002f68:	d105      	bne.n	8002f76 <__libc_init_array+0x2e>
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f70:	4798      	blx	r3
 8002f72:	3501      	adds	r5, #1
 8002f74:	e7ee      	b.n	8002f54 <__libc_init_array+0xc>
 8002f76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f7a:	4798      	blx	r3
 8002f7c:	3501      	adds	r5, #1
 8002f7e:	e7f2      	b.n	8002f66 <__libc_init_array+0x1e>
 8002f80:	08003ab0 	.word	0x08003ab0
 8002f84:	08003ab0 	.word	0x08003ab0
 8002f88:	08003ab0 	.word	0x08003ab0
 8002f8c:	08003ab4 	.word	0x08003ab4

08002f90 <memset>:
 8002f90:	4402      	add	r2, r0
 8002f92:	4603      	mov	r3, r0
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d100      	bne.n	8002f9a <memset+0xa>
 8002f98:	4770      	bx	lr
 8002f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f9e:	e7f9      	b.n	8002f94 <memset+0x4>

08002fa0 <_puts_r>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	460e      	mov	r6, r1
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	b118      	cbz	r0, 8002fb0 <_puts_r+0x10>
 8002fa8:	6983      	ldr	r3, [r0, #24]
 8002faa:	b90b      	cbnz	r3, 8002fb0 <_puts_r+0x10>
 8002fac:	f000 faba 	bl	8003524 <__sinit>
 8002fb0:	69ab      	ldr	r3, [r5, #24]
 8002fb2:	68ac      	ldr	r4, [r5, #8]
 8002fb4:	b913      	cbnz	r3, 8002fbc <_puts_r+0x1c>
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f000 fab4 	bl	8003524 <__sinit>
 8002fbc:	4b23      	ldr	r3, [pc, #140]	; (800304c <_puts_r+0xac>)
 8002fbe:	429c      	cmp	r4, r3
 8002fc0:	d117      	bne.n	8002ff2 <_puts_r+0x52>
 8002fc2:	686c      	ldr	r4, [r5, #4]
 8002fc4:	89a3      	ldrh	r3, [r4, #12]
 8002fc6:	071b      	lsls	r3, r3, #28
 8002fc8:	d51d      	bpl.n	8003006 <_puts_r+0x66>
 8002fca:	6923      	ldr	r3, [r4, #16]
 8002fcc:	b1db      	cbz	r3, 8003006 <_puts_r+0x66>
 8002fce:	3e01      	subs	r6, #1
 8002fd0:	68a3      	ldr	r3, [r4, #8]
 8002fd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	60a3      	str	r3, [r4, #8]
 8002fda:	b9e9      	cbnz	r1, 8003018 <_puts_r+0x78>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	da2e      	bge.n	800303e <_puts_r+0x9e>
 8002fe0:	4622      	mov	r2, r4
 8002fe2:	210a      	movs	r1, #10
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	f000 f8ed 	bl	80031c4 <__swbuf_r>
 8002fea:	3001      	adds	r0, #1
 8002fec:	d011      	beq.n	8003012 <_puts_r+0x72>
 8002fee:	200a      	movs	r0, #10
 8002ff0:	e011      	b.n	8003016 <_puts_r+0x76>
 8002ff2:	4b17      	ldr	r3, [pc, #92]	; (8003050 <_puts_r+0xb0>)
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	d101      	bne.n	8002ffc <_puts_r+0x5c>
 8002ff8:	68ac      	ldr	r4, [r5, #8]
 8002ffa:	e7e3      	b.n	8002fc4 <_puts_r+0x24>
 8002ffc:	4b15      	ldr	r3, [pc, #84]	; (8003054 <_puts_r+0xb4>)
 8002ffe:	429c      	cmp	r4, r3
 8003000:	bf08      	it	eq
 8003002:	68ec      	ldreq	r4, [r5, #12]
 8003004:	e7de      	b.n	8002fc4 <_puts_r+0x24>
 8003006:	4621      	mov	r1, r4
 8003008:	4628      	mov	r0, r5
 800300a:	f000 f92d 	bl	8003268 <__swsetup_r>
 800300e:	2800      	cmp	r0, #0
 8003010:	d0dd      	beq.n	8002fce <_puts_r+0x2e>
 8003012:	f04f 30ff 	mov.w	r0, #4294967295
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	2b00      	cmp	r3, #0
 800301a:	da04      	bge.n	8003026 <_puts_r+0x86>
 800301c:	69a2      	ldr	r2, [r4, #24]
 800301e:	429a      	cmp	r2, r3
 8003020:	dc06      	bgt.n	8003030 <_puts_r+0x90>
 8003022:	290a      	cmp	r1, #10
 8003024:	d004      	beq.n	8003030 <_puts_r+0x90>
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	6022      	str	r2, [r4, #0]
 800302c:	7019      	strb	r1, [r3, #0]
 800302e:	e7cf      	b.n	8002fd0 <_puts_r+0x30>
 8003030:	4622      	mov	r2, r4
 8003032:	4628      	mov	r0, r5
 8003034:	f000 f8c6 	bl	80031c4 <__swbuf_r>
 8003038:	3001      	adds	r0, #1
 800303a:	d1c9      	bne.n	8002fd0 <_puts_r+0x30>
 800303c:	e7e9      	b.n	8003012 <_puts_r+0x72>
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	200a      	movs	r0, #10
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	6022      	str	r2, [r4, #0]
 8003046:	7018      	strb	r0, [r3, #0]
 8003048:	e7e5      	b.n	8003016 <_puts_r+0x76>
 800304a:	bf00      	nop
 800304c:	08003a70 	.word	0x08003a70
 8003050:	08003a90 	.word	0x08003a90
 8003054:	08003a50 	.word	0x08003a50

08003058 <puts>:
 8003058:	4b02      	ldr	r3, [pc, #8]	; (8003064 <puts+0xc>)
 800305a:	4601      	mov	r1, r0
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	f7ff bf9f 	b.w	8002fa0 <_puts_r>
 8003062:	bf00      	nop
 8003064:	2000000c 	.word	0x2000000c

08003068 <setvbuf>:
 8003068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800306c:	461d      	mov	r5, r3
 800306e:	4b51      	ldr	r3, [pc, #324]	; (80031b4 <setvbuf+0x14c>)
 8003070:	681e      	ldr	r6, [r3, #0]
 8003072:	4604      	mov	r4, r0
 8003074:	460f      	mov	r7, r1
 8003076:	4690      	mov	r8, r2
 8003078:	b126      	cbz	r6, 8003084 <setvbuf+0x1c>
 800307a:	69b3      	ldr	r3, [r6, #24]
 800307c:	b913      	cbnz	r3, 8003084 <setvbuf+0x1c>
 800307e:	4630      	mov	r0, r6
 8003080:	f000 fa50 	bl	8003524 <__sinit>
 8003084:	4b4c      	ldr	r3, [pc, #304]	; (80031b8 <setvbuf+0x150>)
 8003086:	429c      	cmp	r4, r3
 8003088:	d152      	bne.n	8003130 <setvbuf+0xc8>
 800308a:	6874      	ldr	r4, [r6, #4]
 800308c:	f1b8 0f02 	cmp.w	r8, #2
 8003090:	d006      	beq.n	80030a0 <setvbuf+0x38>
 8003092:	f1b8 0f01 	cmp.w	r8, #1
 8003096:	f200 8089 	bhi.w	80031ac <setvbuf+0x144>
 800309a:	2d00      	cmp	r5, #0
 800309c:	f2c0 8086 	blt.w	80031ac <setvbuf+0x144>
 80030a0:	4621      	mov	r1, r4
 80030a2:	4630      	mov	r0, r6
 80030a4:	f000 f9d4 	bl	8003450 <_fflush_r>
 80030a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030aa:	b141      	cbz	r1, 80030be <setvbuf+0x56>
 80030ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030b0:	4299      	cmp	r1, r3
 80030b2:	d002      	beq.n	80030ba <setvbuf+0x52>
 80030b4:	4630      	mov	r0, r6
 80030b6:	f000 fb2b 	bl	8003710 <_free_r>
 80030ba:	2300      	movs	r3, #0
 80030bc:	6363      	str	r3, [r4, #52]	; 0x34
 80030be:	2300      	movs	r3, #0
 80030c0:	61a3      	str	r3, [r4, #24]
 80030c2:	6063      	str	r3, [r4, #4]
 80030c4:	89a3      	ldrh	r3, [r4, #12]
 80030c6:	061b      	lsls	r3, r3, #24
 80030c8:	d503      	bpl.n	80030d2 <setvbuf+0x6a>
 80030ca:	6921      	ldr	r1, [r4, #16]
 80030cc:	4630      	mov	r0, r6
 80030ce:	f000 fb1f 	bl	8003710 <_free_r>
 80030d2:	89a3      	ldrh	r3, [r4, #12]
 80030d4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80030d8:	f023 0303 	bic.w	r3, r3, #3
 80030dc:	f1b8 0f02 	cmp.w	r8, #2
 80030e0:	81a3      	strh	r3, [r4, #12]
 80030e2:	d05d      	beq.n	80031a0 <setvbuf+0x138>
 80030e4:	ab01      	add	r3, sp, #4
 80030e6:	466a      	mov	r2, sp
 80030e8:	4621      	mov	r1, r4
 80030ea:	4630      	mov	r0, r6
 80030ec:	f000 faa4 	bl	8003638 <__swhatbuf_r>
 80030f0:	89a3      	ldrh	r3, [r4, #12]
 80030f2:	4318      	orrs	r0, r3
 80030f4:	81a0      	strh	r0, [r4, #12]
 80030f6:	bb2d      	cbnz	r5, 8003144 <setvbuf+0xdc>
 80030f8:	9d00      	ldr	r5, [sp, #0]
 80030fa:	4628      	mov	r0, r5
 80030fc:	f000 fb00 	bl	8003700 <malloc>
 8003100:	4607      	mov	r7, r0
 8003102:	2800      	cmp	r0, #0
 8003104:	d14e      	bne.n	80031a4 <setvbuf+0x13c>
 8003106:	f8dd 9000 	ldr.w	r9, [sp]
 800310a:	45a9      	cmp	r9, r5
 800310c:	d13c      	bne.n	8003188 <setvbuf+0x120>
 800310e:	f04f 30ff 	mov.w	r0, #4294967295
 8003112:	89a3      	ldrh	r3, [r4, #12]
 8003114:	f043 0302 	orr.w	r3, r3, #2
 8003118:	81a3      	strh	r3, [r4, #12]
 800311a:	2300      	movs	r3, #0
 800311c:	60a3      	str	r3, [r4, #8]
 800311e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003122:	6023      	str	r3, [r4, #0]
 8003124:	6123      	str	r3, [r4, #16]
 8003126:	2301      	movs	r3, #1
 8003128:	6163      	str	r3, [r4, #20]
 800312a:	b003      	add	sp, #12
 800312c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <setvbuf+0x154>)
 8003132:	429c      	cmp	r4, r3
 8003134:	d101      	bne.n	800313a <setvbuf+0xd2>
 8003136:	68b4      	ldr	r4, [r6, #8]
 8003138:	e7a8      	b.n	800308c <setvbuf+0x24>
 800313a:	4b21      	ldr	r3, [pc, #132]	; (80031c0 <setvbuf+0x158>)
 800313c:	429c      	cmp	r4, r3
 800313e:	bf08      	it	eq
 8003140:	68f4      	ldreq	r4, [r6, #12]
 8003142:	e7a3      	b.n	800308c <setvbuf+0x24>
 8003144:	2f00      	cmp	r7, #0
 8003146:	d0d8      	beq.n	80030fa <setvbuf+0x92>
 8003148:	69b3      	ldr	r3, [r6, #24]
 800314a:	b913      	cbnz	r3, 8003152 <setvbuf+0xea>
 800314c:	4630      	mov	r0, r6
 800314e:	f000 f9e9 	bl	8003524 <__sinit>
 8003152:	f1b8 0f01 	cmp.w	r8, #1
 8003156:	bf08      	it	eq
 8003158:	89a3      	ldrheq	r3, [r4, #12]
 800315a:	6027      	str	r7, [r4, #0]
 800315c:	bf04      	itt	eq
 800315e:	f043 0301 	orreq.w	r3, r3, #1
 8003162:	81a3      	strheq	r3, [r4, #12]
 8003164:	89a3      	ldrh	r3, [r4, #12]
 8003166:	f013 0008 	ands.w	r0, r3, #8
 800316a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800316e:	d01b      	beq.n	80031a8 <setvbuf+0x140>
 8003170:	f013 0001 	ands.w	r0, r3, #1
 8003174:	bf18      	it	ne
 8003176:	426d      	negne	r5, r5
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	bf1d      	ittte	ne
 800317e:	60a3      	strne	r3, [r4, #8]
 8003180:	61a5      	strne	r5, [r4, #24]
 8003182:	4618      	movne	r0, r3
 8003184:	60a5      	streq	r5, [r4, #8]
 8003186:	e7d0      	b.n	800312a <setvbuf+0xc2>
 8003188:	4648      	mov	r0, r9
 800318a:	f000 fab9 	bl	8003700 <malloc>
 800318e:	4607      	mov	r7, r0
 8003190:	2800      	cmp	r0, #0
 8003192:	d0bc      	beq.n	800310e <setvbuf+0xa6>
 8003194:	89a3      	ldrh	r3, [r4, #12]
 8003196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319a:	81a3      	strh	r3, [r4, #12]
 800319c:	464d      	mov	r5, r9
 800319e:	e7d3      	b.n	8003148 <setvbuf+0xe0>
 80031a0:	2000      	movs	r0, #0
 80031a2:	e7b6      	b.n	8003112 <setvbuf+0xaa>
 80031a4:	46a9      	mov	r9, r5
 80031a6:	e7f5      	b.n	8003194 <setvbuf+0x12c>
 80031a8:	60a0      	str	r0, [r4, #8]
 80031aa:	e7be      	b.n	800312a <setvbuf+0xc2>
 80031ac:	f04f 30ff 	mov.w	r0, #4294967295
 80031b0:	e7bb      	b.n	800312a <setvbuf+0xc2>
 80031b2:	bf00      	nop
 80031b4:	2000000c 	.word	0x2000000c
 80031b8:	08003a70 	.word	0x08003a70
 80031bc:	08003a90 	.word	0x08003a90
 80031c0:	08003a50 	.word	0x08003a50

080031c4 <__swbuf_r>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	460e      	mov	r6, r1
 80031c8:	4614      	mov	r4, r2
 80031ca:	4605      	mov	r5, r0
 80031cc:	b118      	cbz	r0, 80031d6 <__swbuf_r+0x12>
 80031ce:	6983      	ldr	r3, [r0, #24]
 80031d0:	b90b      	cbnz	r3, 80031d6 <__swbuf_r+0x12>
 80031d2:	f000 f9a7 	bl	8003524 <__sinit>
 80031d6:	4b21      	ldr	r3, [pc, #132]	; (800325c <__swbuf_r+0x98>)
 80031d8:	429c      	cmp	r4, r3
 80031da:	d12a      	bne.n	8003232 <__swbuf_r+0x6e>
 80031dc:	686c      	ldr	r4, [r5, #4]
 80031de:	69a3      	ldr	r3, [r4, #24]
 80031e0:	60a3      	str	r3, [r4, #8]
 80031e2:	89a3      	ldrh	r3, [r4, #12]
 80031e4:	071a      	lsls	r2, r3, #28
 80031e6:	d52e      	bpl.n	8003246 <__swbuf_r+0x82>
 80031e8:	6923      	ldr	r3, [r4, #16]
 80031ea:	b363      	cbz	r3, 8003246 <__swbuf_r+0x82>
 80031ec:	6923      	ldr	r3, [r4, #16]
 80031ee:	6820      	ldr	r0, [r4, #0]
 80031f0:	1ac0      	subs	r0, r0, r3
 80031f2:	6963      	ldr	r3, [r4, #20]
 80031f4:	b2f6      	uxtb	r6, r6
 80031f6:	4283      	cmp	r3, r0
 80031f8:	4637      	mov	r7, r6
 80031fa:	dc04      	bgt.n	8003206 <__swbuf_r+0x42>
 80031fc:	4621      	mov	r1, r4
 80031fe:	4628      	mov	r0, r5
 8003200:	f000 f926 	bl	8003450 <_fflush_r>
 8003204:	bb28      	cbnz	r0, 8003252 <__swbuf_r+0x8e>
 8003206:	68a3      	ldr	r3, [r4, #8]
 8003208:	3b01      	subs	r3, #1
 800320a:	60a3      	str	r3, [r4, #8]
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	6022      	str	r2, [r4, #0]
 8003212:	701e      	strb	r6, [r3, #0]
 8003214:	6963      	ldr	r3, [r4, #20]
 8003216:	3001      	adds	r0, #1
 8003218:	4283      	cmp	r3, r0
 800321a:	d004      	beq.n	8003226 <__swbuf_r+0x62>
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	07db      	lsls	r3, r3, #31
 8003220:	d519      	bpl.n	8003256 <__swbuf_r+0x92>
 8003222:	2e0a      	cmp	r6, #10
 8003224:	d117      	bne.n	8003256 <__swbuf_r+0x92>
 8003226:	4621      	mov	r1, r4
 8003228:	4628      	mov	r0, r5
 800322a:	f000 f911 	bl	8003450 <_fflush_r>
 800322e:	b190      	cbz	r0, 8003256 <__swbuf_r+0x92>
 8003230:	e00f      	b.n	8003252 <__swbuf_r+0x8e>
 8003232:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <__swbuf_r+0x9c>)
 8003234:	429c      	cmp	r4, r3
 8003236:	d101      	bne.n	800323c <__swbuf_r+0x78>
 8003238:	68ac      	ldr	r4, [r5, #8]
 800323a:	e7d0      	b.n	80031de <__swbuf_r+0x1a>
 800323c:	4b09      	ldr	r3, [pc, #36]	; (8003264 <__swbuf_r+0xa0>)
 800323e:	429c      	cmp	r4, r3
 8003240:	bf08      	it	eq
 8003242:	68ec      	ldreq	r4, [r5, #12]
 8003244:	e7cb      	b.n	80031de <__swbuf_r+0x1a>
 8003246:	4621      	mov	r1, r4
 8003248:	4628      	mov	r0, r5
 800324a:	f000 f80d 	bl	8003268 <__swsetup_r>
 800324e:	2800      	cmp	r0, #0
 8003250:	d0cc      	beq.n	80031ec <__swbuf_r+0x28>
 8003252:	f04f 37ff 	mov.w	r7, #4294967295
 8003256:	4638      	mov	r0, r7
 8003258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800325a:	bf00      	nop
 800325c:	08003a70 	.word	0x08003a70
 8003260:	08003a90 	.word	0x08003a90
 8003264:	08003a50 	.word	0x08003a50

08003268 <__swsetup_r>:
 8003268:	4b32      	ldr	r3, [pc, #200]	; (8003334 <__swsetup_r+0xcc>)
 800326a:	b570      	push	{r4, r5, r6, lr}
 800326c:	681d      	ldr	r5, [r3, #0]
 800326e:	4606      	mov	r6, r0
 8003270:	460c      	mov	r4, r1
 8003272:	b125      	cbz	r5, 800327e <__swsetup_r+0x16>
 8003274:	69ab      	ldr	r3, [r5, #24]
 8003276:	b913      	cbnz	r3, 800327e <__swsetup_r+0x16>
 8003278:	4628      	mov	r0, r5
 800327a:	f000 f953 	bl	8003524 <__sinit>
 800327e:	4b2e      	ldr	r3, [pc, #184]	; (8003338 <__swsetup_r+0xd0>)
 8003280:	429c      	cmp	r4, r3
 8003282:	d10f      	bne.n	80032a4 <__swsetup_r+0x3c>
 8003284:	686c      	ldr	r4, [r5, #4]
 8003286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800328a:	b29a      	uxth	r2, r3
 800328c:	0715      	lsls	r5, r2, #28
 800328e:	d42c      	bmi.n	80032ea <__swsetup_r+0x82>
 8003290:	06d0      	lsls	r0, r2, #27
 8003292:	d411      	bmi.n	80032b8 <__swsetup_r+0x50>
 8003294:	2209      	movs	r2, #9
 8003296:	6032      	str	r2, [r6, #0]
 8003298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800329c:	81a3      	strh	r3, [r4, #12]
 800329e:	f04f 30ff 	mov.w	r0, #4294967295
 80032a2:	e03e      	b.n	8003322 <__swsetup_r+0xba>
 80032a4:	4b25      	ldr	r3, [pc, #148]	; (800333c <__swsetup_r+0xd4>)
 80032a6:	429c      	cmp	r4, r3
 80032a8:	d101      	bne.n	80032ae <__swsetup_r+0x46>
 80032aa:	68ac      	ldr	r4, [r5, #8]
 80032ac:	e7eb      	b.n	8003286 <__swsetup_r+0x1e>
 80032ae:	4b24      	ldr	r3, [pc, #144]	; (8003340 <__swsetup_r+0xd8>)
 80032b0:	429c      	cmp	r4, r3
 80032b2:	bf08      	it	eq
 80032b4:	68ec      	ldreq	r4, [r5, #12]
 80032b6:	e7e6      	b.n	8003286 <__swsetup_r+0x1e>
 80032b8:	0751      	lsls	r1, r2, #29
 80032ba:	d512      	bpl.n	80032e2 <__swsetup_r+0x7a>
 80032bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032be:	b141      	cbz	r1, 80032d2 <__swsetup_r+0x6a>
 80032c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032c4:	4299      	cmp	r1, r3
 80032c6:	d002      	beq.n	80032ce <__swsetup_r+0x66>
 80032c8:	4630      	mov	r0, r6
 80032ca:	f000 fa21 	bl	8003710 <_free_r>
 80032ce:	2300      	movs	r3, #0
 80032d0:	6363      	str	r3, [r4, #52]	; 0x34
 80032d2:	89a3      	ldrh	r3, [r4, #12]
 80032d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032d8:	81a3      	strh	r3, [r4, #12]
 80032da:	2300      	movs	r3, #0
 80032dc:	6063      	str	r3, [r4, #4]
 80032de:	6923      	ldr	r3, [r4, #16]
 80032e0:	6023      	str	r3, [r4, #0]
 80032e2:	89a3      	ldrh	r3, [r4, #12]
 80032e4:	f043 0308 	orr.w	r3, r3, #8
 80032e8:	81a3      	strh	r3, [r4, #12]
 80032ea:	6923      	ldr	r3, [r4, #16]
 80032ec:	b94b      	cbnz	r3, 8003302 <__swsetup_r+0x9a>
 80032ee:	89a3      	ldrh	r3, [r4, #12]
 80032f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f8:	d003      	beq.n	8003302 <__swsetup_r+0x9a>
 80032fa:	4621      	mov	r1, r4
 80032fc:	4630      	mov	r0, r6
 80032fe:	f000 f9bf 	bl	8003680 <__smakebuf_r>
 8003302:	89a2      	ldrh	r2, [r4, #12]
 8003304:	f012 0301 	ands.w	r3, r2, #1
 8003308:	d00c      	beq.n	8003324 <__swsetup_r+0xbc>
 800330a:	2300      	movs	r3, #0
 800330c:	60a3      	str	r3, [r4, #8]
 800330e:	6963      	ldr	r3, [r4, #20]
 8003310:	425b      	negs	r3, r3
 8003312:	61a3      	str	r3, [r4, #24]
 8003314:	6923      	ldr	r3, [r4, #16]
 8003316:	b953      	cbnz	r3, 800332e <__swsetup_r+0xc6>
 8003318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800331c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003320:	d1ba      	bne.n	8003298 <__swsetup_r+0x30>
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	0792      	lsls	r2, r2, #30
 8003326:	bf58      	it	pl
 8003328:	6963      	ldrpl	r3, [r4, #20]
 800332a:	60a3      	str	r3, [r4, #8]
 800332c:	e7f2      	b.n	8003314 <__swsetup_r+0xac>
 800332e:	2000      	movs	r0, #0
 8003330:	e7f7      	b.n	8003322 <__swsetup_r+0xba>
 8003332:	bf00      	nop
 8003334:	2000000c 	.word	0x2000000c
 8003338:	08003a70 	.word	0x08003a70
 800333c:	08003a90 	.word	0x08003a90
 8003340:	08003a50 	.word	0x08003a50

08003344 <__sflush_r>:
 8003344:	898a      	ldrh	r2, [r1, #12]
 8003346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800334a:	4605      	mov	r5, r0
 800334c:	0710      	lsls	r0, r2, #28
 800334e:	460c      	mov	r4, r1
 8003350:	d458      	bmi.n	8003404 <__sflush_r+0xc0>
 8003352:	684b      	ldr	r3, [r1, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	dc05      	bgt.n	8003364 <__sflush_r+0x20>
 8003358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800335a:	2b00      	cmp	r3, #0
 800335c:	dc02      	bgt.n	8003364 <__sflush_r+0x20>
 800335e:	2000      	movs	r0, #0
 8003360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003366:	2e00      	cmp	r6, #0
 8003368:	d0f9      	beq.n	800335e <__sflush_r+0x1a>
 800336a:	2300      	movs	r3, #0
 800336c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003370:	682f      	ldr	r7, [r5, #0]
 8003372:	6a21      	ldr	r1, [r4, #32]
 8003374:	602b      	str	r3, [r5, #0]
 8003376:	d032      	beq.n	80033de <__sflush_r+0x9a>
 8003378:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	075a      	lsls	r2, r3, #29
 800337e:	d505      	bpl.n	800338c <__sflush_r+0x48>
 8003380:	6863      	ldr	r3, [r4, #4]
 8003382:	1ac0      	subs	r0, r0, r3
 8003384:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003386:	b10b      	cbz	r3, 800338c <__sflush_r+0x48>
 8003388:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800338a:	1ac0      	subs	r0, r0, r3
 800338c:	2300      	movs	r3, #0
 800338e:	4602      	mov	r2, r0
 8003390:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003392:	6a21      	ldr	r1, [r4, #32]
 8003394:	4628      	mov	r0, r5
 8003396:	47b0      	blx	r6
 8003398:	1c43      	adds	r3, r0, #1
 800339a:	89a3      	ldrh	r3, [r4, #12]
 800339c:	d106      	bne.n	80033ac <__sflush_r+0x68>
 800339e:	6829      	ldr	r1, [r5, #0]
 80033a0:	291d      	cmp	r1, #29
 80033a2:	d848      	bhi.n	8003436 <__sflush_r+0xf2>
 80033a4:	4a29      	ldr	r2, [pc, #164]	; (800344c <__sflush_r+0x108>)
 80033a6:	40ca      	lsrs	r2, r1
 80033a8:	07d6      	lsls	r6, r2, #31
 80033aa:	d544      	bpl.n	8003436 <__sflush_r+0xf2>
 80033ac:	2200      	movs	r2, #0
 80033ae:	6062      	str	r2, [r4, #4]
 80033b0:	04d9      	lsls	r1, r3, #19
 80033b2:	6922      	ldr	r2, [r4, #16]
 80033b4:	6022      	str	r2, [r4, #0]
 80033b6:	d504      	bpl.n	80033c2 <__sflush_r+0x7e>
 80033b8:	1c42      	adds	r2, r0, #1
 80033ba:	d101      	bne.n	80033c0 <__sflush_r+0x7c>
 80033bc:	682b      	ldr	r3, [r5, #0]
 80033be:	b903      	cbnz	r3, 80033c2 <__sflush_r+0x7e>
 80033c0:	6560      	str	r0, [r4, #84]	; 0x54
 80033c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033c4:	602f      	str	r7, [r5, #0]
 80033c6:	2900      	cmp	r1, #0
 80033c8:	d0c9      	beq.n	800335e <__sflush_r+0x1a>
 80033ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033ce:	4299      	cmp	r1, r3
 80033d0:	d002      	beq.n	80033d8 <__sflush_r+0x94>
 80033d2:	4628      	mov	r0, r5
 80033d4:	f000 f99c 	bl	8003710 <_free_r>
 80033d8:	2000      	movs	r0, #0
 80033da:	6360      	str	r0, [r4, #52]	; 0x34
 80033dc:	e7c0      	b.n	8003360 <__sflush_r+0x1c>
 80033de:	2301      	movs	r3, #1
 80033e0:	4628      	mov	r0, r5
 80033e2:	47b0      	blx	r6
 80033e4:	1c41      	adds	r1, r0, #1
 80033e6:	d1c8      	bne.n	800337a <__sflush_r+0x36>
 80033e8:	682b      	ldr	r3, [r5, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0c5      	beq.n	800337a <__sflush_r+0x36>
 80033ee:	2b1d      	cmp	r3, #29
 80033f0:	d001      	beq.n	80033f6 <__sflush_r+0xb2>
 80033f2:	2b16      	cmp	r3, #22
 80033f4:	d101      	bne.n	80033fa <__sflush_r+0xb6>
 80033f6:	602f      	str	r7, [r5, #0]
 80033f8:	e7b1      	b.n	800335e <__sflush_r+0x1a>
 80033fa:	89a3      	ldrh	r3, [r4, #12]
 80033fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003400:	81a3      	strh	r3, [r4, #12]
 8003402:	e7ad      	b.n	8003360 <__sflush_r+0x1c>
 8003404:	690f      	ldr	r7, [r1, #16]
 8003406:	2f00      	cmp	r7, #0
 8003408:	d0a9      	beq.n	800335e <__sflush_r+0x1a>
 800340a:	0793      	lsls	r3, r2, #30
 800340c:	680e      	ldr	r6, [r1, #0]
 800340e:	bf08      	it	eq
 8003410:	694b      	ldreq	r3, [r1, #20]
 8003412:	600f      	str	r7, [r1, #0]
 8003414:	bf18      	it	ne
 8003416:	2300      	movne	r3, #0
 8003418:	eba6 0807 	sub.w	r8, r6, r7
 800341c:	608b      	str	r3, [r1, #8]
 800341e:	f1b8 0f00 	cmp.w	r8, #0
 8003422:	dd9c      	ble.n	800335e <__sflush_r+0x1a>
 8003424:	4643      	mov	r3, r8
 8003426:	463a      	mov	r2, r7
 8003428:	6a21      	ldr	r1, [r4, #32]
 800342a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800342c:	4628      	mov	r0, r5
 800342e:	47b0      	blx	r6
 8003430:	2800      	cmp	r0, #0
 8003432:	dc06      	bgt.n	8003442 <__sflush_r+0xfe>
 8003434:	89a3      	ldrh	r3, [r4, #12]
 8003436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800343a:	81a3      	strh	r3, [r4, #12]
 800343c:	f04f 30ff 	mov.w	r0, #4294967295
 8003440:	e78e      	b.n	8003360 <__sflush_r+0x1c>
 8003442:	4407      	add	r7, r0
 8003444:	eba8 0800 	sub.w	r8, r8, r0
 8003448:	e7e9      	b.n	800341e <__sflush_r+0xda>
 800344a:	bf00      	nop
 800344c:	20400001 	.word	0x20400001

08003450 <_fflush_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	690b      	ldr	r3, [r1, #16]
 8003454:	4605      	mov	r5, r0
 8003456:	460c      	mov	r4, r1
 8003458:	b1db      	cbz	r3, 8003492 <_fflush_r+0x42>
 800345a:	b118      	cbz	r0, 8003464 <_fflush_r+0x14>
 800345c:	6983      	ldr	r3, [r0, #24]
 800345e:	b90b      	cbnz	r3, 8003464 <_fflush_r+0x14>
 8003460:	f000 f860 	bl	8003524 <__sinit>
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <_fflush_r+0x48>)
 8003466:	429c      	cmp	r4, r3
 8003468:	d109      	bne.n	800347e <_fflush_r+0x2e>
 800346a:	686c      	ldr	r4, [r5, #4]
 800346c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003470:	b17b      	cbz	r3, 8003492 <_fflush_r+0x42>
 8003472:	4621      	mov	r1, r4
 8003474:	4628      	mov	r0, r5
 8003476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800347a:	f7ff bf63 	b.w	8003344 <__sflush_r>
 800347e:	4b07      	ldr	r3, [pc, #28]	; (800349c <_fflush_r+0x4c>)
 8003480:	429c      	cmp	r4, r3
 8003482:	d101      	bne.n	8003488 <_fflush_r+0x38>
 8003484:	68ac      	ldr	r4, [r5, #8]
 8003486:	e7f1      	b.n	800346c <_fflush_r+0x1c>
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <_fflush_r+0x50>)
 800348a:	429c      	cmp	r4, r3
 800348c:	bf08      	it	eq
 800348e:	68ec      	ldreq	r4, [r5, #12]
 8003490:	e7ec      	b.n	800346c <_fflush_r+0x1c>
 8003492:	2000      	movs	r0, #0
 8003494:	bd38      	pop	{r3, r4, r5, pc}
 8003496:	bf00      	nop
 8003498:	08003a70 	.word	0x08003a70
 800349c:	08003a90 	.word	0x08003a90
 80034a0:	08003a50 	.word	0x08003a50

080034a4 <std>:
 80034a4:	2300      	movs	r3, #0
 80034a6:	b510      	push	{r4, lr}
 80034a8:	4604      	mov	r4, r0
 80034aa:	e9c0 3300 	strd	r3, r3, [r0]
 80034ae:	6083      	str	r3, [r0, #8]
 80034b0:	8181      	strh	r1, [r0, #12]
 80034b2:	6643      	str	r3, [r0, #100]	; 0x64
 80034b4:	81c2      	strh	r2, [r0, #14]
 80034b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034ba:	6183      	str	r3, [r0, #24]
 80034bc:	4619      	mov	r1, r3
 80034be:	2208      	movs	r2, #8
 80034c0:	305c      	adds	r0, #92	; 0x5c
 80034c2:	f7ff fd65 	bl	8002f90 <memset>
 80034c6:	4b05      	ldr	r3, [pc, #20]	; (80034dc <std+0x38>)
 80034c8:	6263      	str	r3, [r4, #36]	; 0x24
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <std+0x3c>)
 80034cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <std+0x40>)
 80034d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <std+0x44>)
 80034d4:	6224      	str	r4, [r4, #32]
 80034d6:	6323      	str	r3, [r4, #48]	; 0x30
 80034d8:	bd10      	pop	{r4, pc}
 80034da:	bf00      	nop
 80034dc:	08003881 	.word	0x08003881
 80034e0:	080038a3 	.word	0x080038a3
 80034e4:	080038db 	.word	0x080038db
 80034e8:	080038ff 	.word	0x080038ff

080034ec <_cleanup_r>:
 80034ec:	4901      	ldr	r1, [pc, #4]	; (80034f4 <_cleanup_r+0x8>)
 80034ee:	f000 b885 	b.w	80035fc <_fwalk_reent>
 80034f2:	bf00      	nop
 80034f4:	08003451 	.word	0x08003451

080034f8 <__sfmoreglue>:
 80034f8:	b570      	push	{r4, r5, r6, lr}
 80034fa:	1e4a      	subs	r2, r1, #1
 80034fc:	2568      	movs	r5, #104	; 0x68
 80034fe:	4355      	muls	r5, r2
 8003500:	460e      	mov	r6, r1
 8003502:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003506:	f000 f951 	bl	80037ac <_malloc_r>
 800350a:	4604      	mov	r4, r0
 800350c:	b140      	cbz	r0, 8003520 <__sfmoreglue+0x28>
 800350e:	2100      	movs	r1, #0
 8003510:	e9c0 1600 	strd	r1, r6, [r0]
 8003514:	300c      	adds	r0, #12
 8003516:	60a0      	str	r0, [r4, #8]
 8003518:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800351c:	f7ff fd38 	bl	8002f90 <memset>
 8003520:	4620      	mov	r0, r4
 8003522:	bd70      	pop	{r4, r5, r6, pc}

08003524 <__sinit>:
 8003524:	6983      	ldr	r3, [r0, #24]
 8003526:	b510      	push	{r4, lr}
 8003528:	4604      	mov	r4, r0
 800352a:	bb33      	cbnz	r3, 800357a <__sinit+0x56>
 800352c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003530:	6503      	str	r3, [r0, #80]	; 0x50
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <__sinit+0x58>)
 8003534:	4a12      	ldr	r2, [pc, #72]	; (8003580 <__sinit+0x5c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6282      	str	r2, [r0, #40]	; 0x28
 800353a:	4298      	cmp	r0, r3
 800353c:	bf04      	itt	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	6183      	streq	r3, [r0, #24]
 8003542:	f000 f81f 	bl	8003584 <__sfp>
 8003546:	6060      	str	r0, [r4, #4]
 8003548:	4620      	mov	r0, r4
 800354a:	f000 f81b 	bl	8003584 <__sfp>
 800354e:	60a0      	str	r0, [r4, #8]
 8003550:	4620      	mov	r0, r4
 8003552:	f000 f817 	bl	8003584 <__sfp>
 8003556:	2200      	movs	r2, #0
 8003558:	60e0      	str	r0, [r4, #12]
 800355a:	2104      	movs	r1, #4
 800355c:	6860      	ldr	r0, [r4, #4]
 800355e:	f7ff ffa1 	bl	80034a4 <std>
 8003562:	2201      	movs	r2, #1
 8003564:	2109      	movs	r1, #9
 8003566:	68a0      	ldr	r0, [r4, #8]
 8003568:	f7ff ff9c 	bl	80034a4 <std>
 800356c:	2202      	movs	r2, #2
 800356e:	2112      	movs	r1, #18
 8003570:	68e0      	ldr	r0, [r4, #12]
 8003572:	f7ff ff97 	bl	80034a4 <std>
 8003576:	2301      	movs	r3, #1
 8003578:	61a3      	str	r3, [r4, #24]
 800357a:	bd10      	pop	{r4, pc}
 800357c:	08003a4c 	.word	0x08003a4c
 8003580:	080034ed 	.word	0x080034ed

08003584 <__sfp>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <__sfp+0x70>)
 8003588:	681e      	ldr	r6, [r3, #0]
 800358a:	69b3      	ldr	r3, [r6, #24]
 800358c:	4607      	mov	r7, r0
 800358e:	b913      	cbnz	r3, 8003596 <__sfp+0x12>
 8003590:	4630      	mov	r0, r6
 8003592:	f7ff ffc7 	bl	8003524 <__sinit>
 8003596:	3648      	adds	r6, #72	; 0x48
 8003598:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800359c:	3b01      	subs	r3, #1
 800359e:	d503      	bpl.n	80035a8 <__sfp+0x24>
 80035a0:	6833      	ldr	r3, [r6, #0]
 80035a2:	b133      	cbz	r3, 80035b2 <__sfp+0x2e>
 80035a4:	6836      	ldr	r6, [r6, #0]
 80035a6:	e7f7      	b.n	8003598 <__sfp+0x14>
 80035a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035ac:	b16d      	cbz	r5, 80035ca <__sfp+0x46>
 80035ae:	3468      	adds	r4, #104	; 0x68
 80035b0:	e7f4      	b.n	800359c <__sfp+0x18>
 80035b2:	2104      	movs	r1, #4
 80035b4:	4638      	mov	r0, r7
 80035b6:	f7ff ff9f 	bl	80034f8 <__sfmoreglue>
 80035ba:	6030      	str	r0, [r6, #0]
 80035bc:	2800      	cmp	r0, #0
 80035be:	d1f1      	bne.n	80035a4 <__sfp+0x20>
 80035c0:	230c      	movs	r3, #12
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4604      	mov	r4, r0
 80035c6:	4620      	mov	r0, r4
 80035c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ca:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <__sfp+0x74>)
 80035cc:	6665      	str	r5, [r4, #100]	; 0x64
 80035ce:	e9c4 5500 	strd	r5, r5, [r4]
 80035d2:	60a5      	str	r5, [r4, #8]
 80035d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80035d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80035dc:	2208      	movs	r2, #8
 80035de:	4629      	mov	r1, r5
 80035e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035e4:	f7ff fcd4 	bl	8002f90 <memset>
 80035e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035f0:	e7e9      	b.n	80035c6 <__sfp+0x42>
 80035f2:	bf00      	nop
 80035f4:	08003a4c 	.word	0x08003a4c
 80035f8:	ffff0001 	.word	0xffff0001

080035fc <_fwalk_reent>:
 80035fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003600:	4680      	mov	r8, r0
 8003602:	4689      	mov	r9, r1
 8003604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003608:	2600      	movs	r6, #0
 800360a:	b914      	cbnz	r4, 8003612 <_fwalk_reent+0x16>
 800360c:	4630      	mov	r0, r6
 800360e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003612:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003616:	3f01      	subs	r7, #1
 8003618:	d501      	bpl.n	800361e <_fwalk_reent+0x22>
 800361a:	6824      	ldr	r4, [r4, #0]
 800361c:	e7f5      	b.n	800360a <_fwalk_reent+0xe>
 800361e:	89ab      	ldrh	r3, [r5, #12]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d907      	bls.n	8003634 <_fwalk_reent+0x38>
 8003624:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003628:	3301      	adds	r3, #1
 800362a:	d003      	beq.n	8003634 <_fwalk_reent+0x38>
 800362c:	4629      	mov	r1, r5
 800362e:	4640      	mov	r0, r8
 8003630:	47c8      	blx	r9
 8003632:	4306      	orrs	r6, r0
 8003634:	3568      	adds	r5, #104	; 0x68
 8003636:	e7ee      	b.n	8003616 <_fwalk_reent+0x1a>

08003638 <__swhatbuf_r>:
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	460e      	mov	r6, r1
 800363c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003640:	2900      	cmp	r1, #0
 8003642:	b096      	sub	sp, #88	; 0x58
 8003644:	4614      	mov	r4, r2
 8003646:	461d      	mov	r5, r3
 8003648:	da07      	bge.n	800365a <__swhatbuf_r+0x22>
 800364a:	2300      	movs	r3, #0
 800364c:	602b      	str	r3, [r5, #0]
 800364e:	89b3      	ldrh	r3, [r6, #12]
 8003650:	061a      	lsls	r2, r3, #24
 8003652:	d410      	bmi.n	8003676 <__swhatbuf_r+0x3e>
 8003654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003658:	e00e      	b.n	8003678 <__swhatbuf_r+0x40>
 800365a:	466a      	mov	r2, sp
 800365c:	f000 f976 	bl	800394c <_fstat_r>
 8003660:	2800      	cmp	r0, #0
 8003662:	dbf2      	blt.n	800364a <__swhatbuf_r+0x12>
 8003664:	9a01      	ldr	r2, [sp, #4]
 8003666:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800366a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800366e:	425a      	negs	r2, r3
 8003670:	415a      	adcs	r2, r3
 8003672:	602a      	str	r2, [r5, #0]
 8003674:	e7ee      	b.n	8003654 <__swhatbuf_r+0x1c>
 8003676:	2340      	movs	r3, #64	; 0x40
 8003678:	2000      	movs	r0, #0
 800367a:	6023      	str	r3, [r4, #0]
 800367c:	b016      	add	sp, #88	; 0x58
 800367e:	bd70      	pop	{r4, r5, r6, pc}

08003680 <__smakebuf_r>:
 8003680:	898b      	ldrh	r3, [r1, #12]
 8003682:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003684:	079d      	lsls	r5, r3, #30
 8003686:	4606      	mov	r6, r0
 8003688:	460c      	mov	r4, r1
 800368a:	d507      	bpl.n	800369c <__smakebuf_r+0x1c>
 800368c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003690:	6023      	str	r3, [r4, #0]
 8003692:	6123      	str	r3, [r4, #16]
 8003694:	2301      	movs	r3, #1
 8003696:	6163      	str	r3, [r4, #20]
 8003698:	b002      	add	sp, #8
 800369a:	bd70      	pop	{r4, r5, r6, pc}
 800369c:	ab01      	add	r3, sp, #4
 800369e:	466a      	mov	r2, sp
 80036a0:	f7ff ffca 	bl	8003638 <__swhatbuf_r>
 80036a4:	9900      	ldr	r1, [sp, #0]
 80036a6:	4605      	mov	r5, r0
 80036a8:	4630      	mov	r0, r6
 80036aa:	f000 f87f 	bl	80037ac <_malloc_r>
 80036ae:	b948      	cbnz	r0, 80036c4 <__smakebuf_r+0x44>
 80036b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036b4:	059a      	lsls	r2, r3, #22
 80036b6:	d4ef      	bmi.n	8003698 <__smakebuf_r+0x18>
 80036b8:	f023 0303 	bic.w	r3, r3, #3
 80036bc:	f043 0302 	orr.w	r3, r3, #2
 80036c0:	81a3      	strh	r3, [r4, #12]
 80036c2:	e7e3      	b.n	800368c <__smakebuf_r+0xc>
 80036c4:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <__smakebuf_r+0x7c>)
 80036c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	6020      	str	r0, [r4, #0]
 80036cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d0:	81a3      	strh	r3, [r4, #12]
 80036d2:	9b00      	ldr	r3, [sp, #0]
 80036d4:	6163      	str	r3, [r4, #20]
 80036d6:	9b01      	ldr	r3, [sp, #4]
 80036d8:	6120      	str	r0, [r4, #16]
 80036da:	b15b      	cbz	r3, 80036f4 <__smakebuf_r+0x74>
 80036dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036e0:	4630      	mov	r0, r6
 80036e2:	f000 f945 	bl	8003970 <_isatty_r>
 80036e6:	b128      	cbz	r0, 80036f4 <__smakebuf_r+0x74>
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	f023 0303 	bic.w	r3, r3, #3
 80036ee:	f043 0301 	orr.w	r3, r3, #1
 80036f2:	81a3      	strh	r3, [r4, #12]
 80036f4:	89a3      	ldrh	r3, [r4, #12]
 80036f6:	431d      	orrs	r5, r3
 80036f8:	81a5      	strh	r5, [r4, #12]
 80036fa:	e7cd      	b.n	8003698 <__smakebuf_r+0x18>
 80036fc:	080034ed 	.word	0x080034ed

08003700 <malloc>:
 8003700:	4b02      	ldr	r3, [pc, #8]	; (800370c <malloc+0xc>)
 8003702:	4601      	mov	r1, r0
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	f000 b851 	b.w	80037ac <_malloc_r>
 800370a:	bf00      	nop
 800370c:	2000000c 	.word	0x2000000c

08003710 <_free_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4605      	mov	r5, r0
 8003714:	2900      	cmp	r1, #0
 8003716:	d045      	beq.n	80037a4 <_free_r+0x94>
 8003718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800371c:	1f0c      	subs	r4, r1, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	bfb8      	it	lt
 8003722:	18e4      	addlt	r4, r4, r3
 8003724:	f000 f946 	bl	80039b4 <__malloc_lock>
 8003728:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <_free_r+0x98>)
 800372a:	6813      	ldr	r3, [r2, #0]
 800372c:	4610      	mov	r0, r2
 800372e:	b933      	cbnz	r3, 800373e <_free_r+0x2e>
 8003730:	6063      	str	r3, [r4, #4]
 8003732:	6014      	str	r4, [r2, #0]
 8003734:	4628      	mov	r0, r5
 8003736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800373a:	f000 b93c 	b.w	80039b6 <__malloc_unlock>
 800373e:	42a3      	cmp	r3, r4
 8003740:	d90c      	bls.n	800375c <_free_r+0x4c>
 8003742:	6821      	ldr	r1, [r4, #0]
 8003744:	1862      	adds	r2, r4, r1
 8003746:	4293      	cmp	r3, r2
 8003748:	bf04      	itt	eq
 800374a:	681a      	ldreq	r2, [r3, #0]
 800374c:	685b      	ldreq	r3, [r3, #4]
 800374e:	6063      	str	r3, [r4, #4]
 8003750:	bf04      	itt	eq
 8003752:	1852      	addeq	r2, r2, r1
 8003754:	6022      	streq	r2, [r4, #0]
 8003756:	6004      	str	r4, [r0, #0]
 8003758:	e7ec      	b.n	8003734 <_free_r+0x24>
 800375a:	4613      	mov	r3, r2
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	b10a      	cbz	r2, 8003764 <_free_r+0x54>
 8003760:	42a2      	cmp	r2, r4
 8003762:	d9fa      	bls.n	800375a <_free_r+0x4a>
 8003764:	6819      	ldr	r1, [r3, #0]
 8003766:	1858      	adds	r0, r3, r1
 8003768:	42a0      	cmp	r0, r4
 800376a:	d10b      	bne.n	8003784 <_free_r+0x74>
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	4401      	add	r1, r0
 8003770:	1858      	adds	r0, r3, r1
 8003772:	4282      	cmp	r2, r0
 8003774:	6019      	str	r1, [r3, #0]
 8003776:	d1dd      	bne.n	8003734 <_free_r+0x24>
 8003778:	6810      	ldr	r0, [r2, #0]
 800377a:	6852      	ldr	r2, [r2, #4]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	4401      	add	r1, r0
 8003780:	6019      	str	r1, [r3, #0]
 8003782:	e7d7      	b.n	8003734 <_free_r+0x24>
 8003784:	d902      	bls.n	800378c <_free_r+0x7c>
 8003786:	230c      	movs	r3, #12
 8003788:	602b      	str	r3, [r5, #0]
 800378a:	e7d3      	b.n	8003734 <_free_r+0x24>
 800378c:	6820      	ldr	r0, [r4, #0]
 800378e:	1821      	adds	r1, r4, r0
 8003790:	428a      	cmp	r2, r1
 8003792:	bf04      	itt	eq
 8003794:	6811      	ldreq	r1, [r2, #0]
 8003796:	6852      	ldreq	r2, [r2, #4]
 8003798:	6062      	str	r2, [r4, #4]
 800379a:	bf04      	itt	eq
 800379c:	1809      	addeq	r1, r1, r0
 800379e:	6021      	streq	r1, [r4, #0]
 80037a0:	605c      	str	r4, [r3, #4]
 80037a2:	e7c7      	b.n	8003734 <_free_r+0x24>
 80037a4:	bd38      	pop	{r3, r4, r5, pc}
 80037a6:	bf00      	nop
 80037a8:	20000090 	.word	0x20000090

080037ac <_malloc_r>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	1ccd      	adds	r5, r1, #3
 80037b0:	f025 0503 	bic.w	r5, r5, #3
 80037b4:	3508      	adds	r5, #8
 80037b6:	2d0c      	cmp	r5, #12
 80037b8:	bf38      	it	cc
 80037ba:	250c      	movcc	r5, #12
 80037bc:	2d00      	cmp	r5, #0
 80037be:	4606      	mov	r6, r0
 80037c0:	db01      	blt.n	80037c6 <_malloc_r+0x1a>
 80037c2:	42a9      	cmp	r1, r5
 80037c4:	d903      	bls.n	80037ce <_malloc_r+0x22>
 80037c6:	230c      	movs	r3, #12
 80037c8:	6033      	str	r3, [r6, #0]
 80037ca:	2000      	movs	r0, #0
 80037cc:	bd70      	pop	{r4, r5, r6, pc}
 80037ce:	f000 f8f1 	bl	80039b4 <__malloc_lock>
 80037d2:	4a21      	ldr	r2, [pc, #132]	; (8003858 <_malloc_r+0xac>)
 80037d4:	6814      	ldr	r4, [r2, #0]
 80037d6:	4621      	mov	r1, r4
 80037d8:	b991      	cbnz	r1, 8003800 <_malloc_r+0x54>
 80037da:	4c20      	ldr	r4, [pc, #128]	; (800385c <_malloc_r+0xb0>)
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	b91b      	cbnz	r3, 80037e8 <_malloc_r+0x3c>
 80037e0:	4630      	mov	r0, r6
 80037e2:	f000 f83d 	bl	8003860 <_sbrk_r>
 80037e6:	6020      	str	r0, [r4, #0]
 80037e8:	4629      	mov	r1, r5
 80037ea:	4630      	mov	r0, r6
 80037ec:	f000 f838 	bl	8003860 <_sbrk_r>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d124      	bne.n	800383e <_malloc_r+0x92>
 80037f4:	230c      	movs	r3, #12
 80037f6:	6033      	str	r3, [r6, #0]
 80037f8:	4630      	mov	r0, r6
 80037fa:	f000 f8dc 	bl	80039b6 <__malloc_unlock>
 80037fe:	e7e4      	b.n	80037ca <_malloc_r+0x1e>
 8003800:	680b      	ldr	r3, [r1, #0]
 8003802:	1b5b      	subs	r3, r3, r5
 8003804:	d418      	bmi.n	8003838 <_malloc_r+0x8c>
 8003806:	2b0b      	cmp	r3, #11
 8003808:	d90f      	bls.n	800382a <_malloc_r+0x7e>
 800380a:	600b      	str	r3, [r1, #0]
 800380c:	50cd      	str	r5, [r1, r3]
 800380e:	18cc      	adds	r4, r1, r3
 8003810:	4630      	mov	r0, r6
 8003812:	f000 f8d0 	bl	80039b6 <__malloc_unlock>
 8003816:	f104 000b 	add.w	r0, r4, #11
 800381a:	1d23      	adds	r3, r4, #4
 800381c:	f020 0007 	bic.w	r0, r0, #7
 8003820:	1ac3      	subs	r3, r0, r3
 8003822:	d0d3      	beq.n	80037cc <_malloc_r+0x20>
 8003824:	425a      	negs	r2, r3
 8003826:	50e2      	str	r2, [r4, r3]
 8003828:	e7d0      	b.n	80037cc <_malloc_r+0x20>
 800382a:	428c      	cmp	r4, r1
 800382c:	684b      	ldr	r3, [r1, #4]
 800382e:	bf16      	itet	ne
 8003830:	6063      	strne	r3, [r4, #4]
 8003832:	6013      	streq	r3, [r2, #0]
 8003834:	460c      	movne	r4, r1
 8003836:	e7eb      	b.n	8003810 <_malloc_r+0x64>
 8003838:	460c      	mov	r4, r1
 800383a:	6849      	ldr	r1, [r1, #4]
 800383c:	e7cc      	b.n	80037d8 <_malloc_r+0x2c>
 800383e:	1cc4      	adds	r4, r0, #3
 8003840:	f024 0403 	bic.w	r4, r4, #3
 8003844:	42a0      	cmp	r0, r4
 8003846:	d005      	beq.n	8003854 <_malloc_r+0xa8>
 8003848:	1a21      	subs	r1, r4, r0
 800384a:	4630      	mov	r0, r6
 800384c:	f000 f808 	bl	8003860 <_sbrk_r>
 8003850:	3001      	adds	r0, #1
 8003852:	d0cf      	beq.n	80037f4 <_malloc_r+0x48>
 8003854:	6025      	str	r5, [r4, #0]
 8003856:	e7db      	b.n	8003810 <_malloc_r+0x64>
 8003858:	20000090 	.word	0x20000090
 800385c:	20000094 	.word	0x20000094

08003860 <_sbrk_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	4c06      	ldr	r4, [pc, #24]	; (800387c <_sbrk_r+0x1c>)
 8003864:	2300      	movs	r3, #0
 8003866:	4605      	mov	r5, r0
 8003868:	4608      	mov	r0, r1
 800386a:	6023      	str	r3, [r4, #0]
 800386c:	f7ff fafa 	bl	8002e64 <_sbrk>
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	d102      	bne.n	800387a <_sbrk_r+0x1a>
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	b103      	cbz	r3, 800387a <_sbrk_r+0x1a>
 8003878:	602b      	str	r3, [r5, #0]
 800387a:	bd38      	pop	{r3, r4, r5, pc}
 800387c:	20000134 	.word	0x20000134

08003880 <__sread>:
 8003880:	b510      	push	{r4, lr}
 8003882:	460c      	mov	r4, r1
 8003884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003888:	f000 f896 	bl	80039b8 <_read_r>
 800388c:	2800      	cmp	r0, #0
 800388e:	bfab      	itete	ge
 8003890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003892:	89a3      	ldrhlt	r3, [r4, #12]
 8003894:	181b      	addge	r3, r3, r0
 8003896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800389a:	bfac      	ite	ge
 800389c:	6563      	strge	r3, [r4, #84]	; 0x54
 800389e:	81a3      	strhlt	r3, [r4, #12]
 80038a0:	bd10      	pop	{r4, pc}

080038a2 <__swrite>:
 80038a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038a6:	461f      	mov	r7, r3
 80038a8:	898b      	ldrh	r3, [r1, #12]
 80038aa:	05db      	lsls	r3, r3, #23
 80038ac:	4605      	mov	r5, r0
 80038ae:	460c      	mov	r4, r1
 80038b0:	4616      	mov	r6, r2
 80038b2:	d505      	bpl.n	80038c0 <__swrite+0x1e>
 80038b4:	2302      	movs	r3, #2
 80038b6:	2200      	movs	r2, #0
 80038b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038bc:	f000 f868 	bl	8003990 <_lseek_r>
 80038c0:	89a3      	ldrh	r3, [r4, #12]
 80038c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038ca:	81a3      	strh	r3, [r4, #12]
 80038cc:	4632      	mov	r2, r6
 80038ce:	463b      	mov	r3, r7
 80038d0:	4628      	mov	r0, r5
 80038d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038d6:	f000 b817 	b.w	8003908 <_write_r>

080038da <__sseek>:
 80038da:	b510      	push	{r4, lr}
 80038dc:	460c      	mov	r4, r1
 80038de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038e2:	f000 f855 	bl	8003990 <_lseek_r>
 80038e6:	1c43      	adds	r3, r0, #1
 80038e8:	89a3      	ldrh	r3, [r4, #12]
 80038ea:	bf15      	itete	ne
 80038ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80038ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80038f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80038f6:	81a3      	strheq	r3, [r4, #12]
 80038f8:	bf18      	it	ne
 80038fa:	81a3      	strhne	r3, [r4, #12]
 80038fc:	bd10      	pop	{r4, pc}

080038fe <__sclose>:
 80038fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003902:	f000 b813 	b.w	800392c <_close_r>
	...

08003908 <_write_r>:
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	4c07      	ldr	r4, [pc, #28]	; (8003928 <_write_r+0x20>)
 800390c:	4605      	mov	r5, r0
 800390e:	4608      	mov	r0, r1
 8003910:	4611      	mov	r1, r2
 8003912:	2200      	movs	r2, #0
 8003914:	6022      	str	r2, [r4, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	f7ff f978 	bl	8002c0c <_write>
 800391c:	1c43      	adds	r3, r0, #1
 800391e:	d102      	bne.n	8003926 <_write_r+0x1e>
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	b103      	cbz	r3, 8003926 <_write_r+0x1e>
 8003924:	602b      	str	r3, [r5, #0]
 8003926:	bd38      	pop	{r3, r4, r5, pc}
 8003928:	20000134 	.word	0x20000134

0800392c <_close_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	4c06      	ldr	r4, [pc, #24]	; (8003948 <_close_r+0x1c>)
 8003930:	2300      	movs	r3, #0
 8003932:	4605      	mov	r5, r0
 8003934:	4608      	mov	r0, r1
 8003936:	6023      	str	r3, [r4, #0]
 8003938:	f7ff f994 	bl	8002c64 <_close>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d102      	bne.n	8003946 <_close_r+0x1a>
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	b103      	cbz	r3, 8003946 <_close_r+0x1a>
 8003944:	602b      	str	r3, [r5, #0]
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	20000134 	.word	0x20000134

0800394c <_fstat_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4c07      	ldr	r4, [pc, #28]	; (800396c <_fstat_r+0x20>)
 8003950:	2300      	movs	r3, #0
 8003952:	4605      	mov	r5, r0
 8003954:	4608      	mov	r0, r1
 8003956:	4611      	mov	r1, r2
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	f7ff f9d3 	bl	8002d04 <_fstat>
 800395e:	1c43      	adds	r3, r0, #1
 8003960:	d102      	bne.n	8003968 <_fstat_r+0x1c>
 8003962:	6823      	ldr	r3, [r4, #0]
 8003964:	b103      	cbz	r3, 8003968 <_fstat_r+0x1c>
 8003966:	602b      	str	r3, [r5, #0]
 8003968:	bd38      	pop	{r3, r4, r5, pc}
 800396a:	bf00      	nop
 800396c:	20000134 	.word	0x20000134

08003970 <_isatty_r>:
 8003970:	b538      	push	{r3, r4, r5, lr}
 8003972:	4c06      	ldr	r4, [pc, #24]	; (800398c <_isatty_r+0x1c>)
 8003974:	2300      	movs	r3, #0
 8003976:	4605      	mov	r5, r0
 8003978:	4608      	mov	r0, r1
 800397a:	6023      	str	r3, [r4, #0]
 800397c:	f7ff f930 	bl	8002be0 <_isatty>
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	d102      	bne.n	800398a <_isatty_r+0x1a>
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	b103      	cbz	r3, 800398a <_isatty_r+0x1a>
 8003988:	602b      	str	r3, [r5, #0]
 800398a:	bd38      	pop	{r3, r4, r5, pc}
 800398c:	20000134 	.word	0x20000134

08003990 <_lseek_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	4c07      	ldr	r4, [pc, #28]	; (80039b0 <_lseek_r+0x20>)
 8003994:	4605      	mov	r5, r0
 8003996:	4608      	mov	r0, r1
 8003998:	4611      	mov	r1, r2
 800399a:	2200      	movs	r2, #0
 800399c:	6022      	str	r2, [r4, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	f7ff f977 	bl	8002c92 <_lseek>
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	d102      	bne.n	80039ae <_lseek_r+0x1e>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	b103      	cbz	r3, 80039ae <_lseek_r+0x1e>
 80039ac:	602b      	str	r3, [r5, #0]
 80039ae:	bd38      	pop	{r3, r4, r5, pc}
 80039b0:	20000134 	.word	0x20000134

080039b4 <__malloc_lock>:
 80039b4:	4770      	bx	lr

080039b6 <__malloc_unlock>:
 80039b6:	4770      	bx	lr

080039b8 <_read_r>:
 80039b8:	b538      	push	{r3, r4, r5, lr}
 80039ba:	4c07      	ldr	r4, [pc, #28]	; (80039d8 <_read_r+0x20>)
 80039bc:	4605      	mov	r5, r0
 80039be:	4608      	mov	r0, r1
 80039c0:	4611      	mov	r1, r2
 80039c2:	2200      	movs	r2, #0
 80039c4:	6022      	str	r2, [r4, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	f7ff f974 	bl	8002cb4 <_read>
 80039cc:	1c43      	adds	r3, r0, #1
 80039ce:	d102      	bne.n	80039d6 <_read_r+0x1e>
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	b103      	cbz	r3, 80039d6 <_read_r+0x1e>
 80039d4:	602b      	str	r3, [r5, #0]
 80039d6:	bd38      	pop	{r3, r4, r5, pc}
 80039d8:	20000134 	.word	0x20000134

080039dc <_init>:
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	bf00      	nop
 80039e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039e2:	bc08      	pop	{r3}
 80039e4:	469e      	mov	lr, r3
 80039e6:	4770      	bx	lr

080039e8 <_fini>:
 80039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ea:	bf00      	nop
 80039ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ee:	bc08      	pop	{r3}
 80039f0:	469e      	mov	lr, r3
 80039f2:	4770      	bx	lr
